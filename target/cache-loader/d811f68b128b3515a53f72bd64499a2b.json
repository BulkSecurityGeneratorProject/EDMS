{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/user-route-access-service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/core/auth/user-route-access-service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d;\nconst core_1 = require(\"@angular/core\");\nconst router_1 = require(\"@angular/router\");\nconst core_2 = require(\"app/core/\");\nconst login_modal_service_1 = require(\"app/core/login/login-modal.service\");\nconst state_storage_service_1 = require(\"./state-storage.service\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet UserRouteAccessService = class UserRouteAccessService {\n    constructor(router, loginModalService, accountService, stateStorageService) {\n        this.router = router;\n        this.loginModalService = loginModalService;\n        this.accountService = accountService;\n        this.stateStorageService = stateStorageService;\n    }\n    canActivate(route, state) {\n        const authorities = route.data['authorities'];\n        // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\n        // that the client has a principal too, if they already logged in by the server.\n        // This could happen on a page refresh.\n        return this.checkLogin(authorities, state.url);\n    }\n    checkLogin(authorities, url) {\n        return this.accountService.identity().then(account => {\n            if (!authorities || authorities.length === 0) {\n                return true;\n            }\n            if (account) {\n                const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\n                if (hasAnyAuthority) {\n                    return true;\n                }\n                if (core_1.isDevMode()) {\n                    console.error(app_constants_1.USER_HAS_NOT_ANY_OF_REQUIRED_AUTHORITIES, authorities);\n                }\n                return false;\n            }\n            this.stateStorageService.storeUrl(url);\n            // this.router.navigate([' ']).then(() => {\n            //   // only show the login dialog, if the user hasn't logged in yet\n            //   if (account) {\n            //     this.router.navigate(['/dashboard']);\n            //   }\n            // });\n            this.router.navigate([app_constants_1.ACCESS_DENIED]).then(() => {\n                // only show the login dialog, if the user hasn't logged in yet\n                if (!account) {\n                    this.router.navigate(['/']);\n                }\n            });\n            return false;\n        });\n    }\n};\nUserRouteAccessService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _a : Object, typeof (_b = typeof login_modal_service_1.LoginModalService !== \"undefined\" && login_modal_service_1.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _d : Object])\n], UserRouteAccessService);\nexports.UserRouteAccessService = UserRouteAccessService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/core/auth/user-route-access-service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/user-route-access-service.ts"],"names":[],"mappings":";;;;AAAA,wCAAsD;AACtD,4CAAmG;AAEnG,oCAA2C;AAC3C,4EAAuE;AACvE,mEAA8D;AAC9D,qDAA4F;AAG5F,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IACjC,YACU,MAAc,EACd,iBAAoC,EACpC,cAA8B,EAC9B,mBAAwC;QAHxC,WAAM,GAAN,MAAM,CAAQ;QACd,sBAAiB,GAAjB,iBAAiB,CAAmB;QACpC,mBAAc,GAAd,cAAc,CAAgB;QAC9B,wBAAmB,GAAnB,mBAAmB,CAAqB;IAC/C,CAAC;IAEJ,WAAW,CAAC,KAA6B,EAAE,KAA0B;QACnE,MAAM,WAAW,GAAG,KAAK,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;QAC9C,6FAA6F;QAC7F,gFAAgF;QAChF,uCAAuC;QACvC,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;IACjD,CAAC;IAED,UAAU,CAAC,WAAqB,EAAE,GAAW;QAC3C,OAAO,IAAI,CAAC,cAAc,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE;YACnD,IAAI,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,EAAE;gBAC5C,OAAO,IAAI,CAAC;aACb;YAED,IAAI,OAAO,EAAE;gBACX,MAAM,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC;gBACzE,IAAI,eAAe,EAAE;oBACnB,OAAO,IAAI,CAAC;iBACb;gBACD,IAAI,gBAAS,EAAE,EAAE;oBACf,OAAO,CAAC,KAAK,CAAC,wDAAwC,EAAE,WAAW,CAAC,CAAC;iBACtE;gBACD,OAAO,KAAK,CAAC;aACd;YAED,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;YACvC,2CAA2C;YAC3C,oEAAoE;YACpE,mBAAmB;YACnB,4CAA4C;YAC5C,MAAM;YACN,MAAM;YACN,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,6BAAa,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;gBAC9C,+DAA+D;gBAC/D,IAAI,CAAC,OAAO,EAAE;oBACZ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC7B;YACH,CAAC,CAAC,CAAC;YACH,OAAO,KAAK,CAAC;QACf,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjDY,sBAAsB;IADlC,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAGf,eAAM,oBAAN,eAAM,oDACK,uCAAiB,oBAAjB,uCAAiB,oDACpB,qBAAc,oBAAd,qBAAc,oDACT,2CAAmB,oBAAnB,2CAAmB;GALvC,sBAAsB,CAiDlC;AAjDY,wDAAsB","sourcesContent":["import { Injectable, isDevMode } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot } from '@angular/router';\n\nimport { AccountService } from 'app/core/';\nimport { LoginModalService } from 'app/core/login/login-modal.service';\nimport { StateStorageService } from './state-storage.service';\nimport { ACCESS_DENIED, USER_HAS_NOT_ANY_OF_REQUIRED_AUTHORITIES } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class UserRouteAccessService implements CanActivate {\n  constructor(\n    private router: Router,\n    private loginModalService: LoginModalService,\n    private accountService: AccountService,\n    private stateStorageService: StateStorageService\n  ) {}\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): boolean | Promise<boolean> {\n    const authorities = route.data['authorities'];\n    // We need to call the checkLogin / and so the accountService.identity() function, to ensure,\n    // that the client has a principal too, if they already logged in by the server.\n    // This could happen on a page refresh.\n    return this.checkLogin(authorities, state.url);\n  }\n\n  checkLogin(authorities: string[], url: string): Promise<boolean> {\n    return this.accountService.identity().then(account => {\n      if (!authorities || authorities.length === 0) {\n        return true;\n      }\n\n      if (account) {\n        const hasAnyAuthority = this.accountService.hasAnyAuthority(authorities);\n        if (hasAnyAuthority) {\n          return true;\n        }\n        if (isDevMode()) {\n          console.error(USER_HAS_NOT_ANY_OF_REQUIRED_AUTHORITIES, authorities);\n        }\n        return false;\n      }\n\n      this.stateStorageService.storeUrl(url);\n      // this.router.navigate([' ']).then(() => {\n      //   // only show the login dialog, if the user hasn't logged in yet\n      //   if (account) {\n      //     this.router.navigate(['/dashboard']);\n      //   }\n      // });\n      this.router.navigate([ACCESS_DENIED]).then(() => {\n        // only show the login dialog, if the user hasn't logged in yet\n        if (!account) {\n          this.router.navigate(['/']);\n        }\n      });\n      return false;\n    });\n  }\n}\n"]}]}