{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/home/home.component.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/home/home.component.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e, _f;\nconst core_1 = require(\"@angular/core\");\nconst ng_jhipster_1 = require(\"ng-jhipster\");\nconst core_2 = require(\"app/core\");\nconst router_1 = require(\"@angular/router\");\nconst login_service_1 = require(\"app/core/login/login.service\");\nconst state_storage_service_1 = require(\"app/core/auth/state-storage.service\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet HomeComponent = class HomeComponent {\n    constructor(accountService, loginModalService, eventManager, loginService, stateStorageService, router) {\n        this.accountService = accountService;\n        this.loginModalService = loginModalService;\n        this.eventManager = eventManager;\n        this.loginService = loginService;\n        this.stateStorageService = stateStorageService;\n        this.router = router;\n    }\n    ngOnInit() {\n        this.accountService.identity().then((account) => {\n            this.account = account;\n        });\n        this.registerAuthenticationSuccess();\n    }\n    // If Registeration is success\n    registerAuthenticationSuccess() {\n        this.eventManager.subscribe(app_constants_1.AUTHENTICATION_SUCCESS, message => {\n            this.accountService.identity().then(account => {\n                this.account = account;\n            });\n        });\n    }\n    cancel() {\n        this.authenticationError = false;\n        this.username = '';\n        this.password = '';\n    }\n    // login\n    login() {\n        this.loginService\n            .login(this.getCrendiential())\n            .then(() => {\n            this.authenticationError = false;\n            this.navigationBasedOnCreditial();\n            this.eventManager.broadcast(this.getEvent());\n            // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n            // since login is successful, go to stored previousState and clear previousState\n            const redirect = this.stateStorageService.getUrl();\n            this.redirectToLogin(redirect);\n        })\n            .catch(() => {\n            this.setDataBasedOnError();\n        });\n    }\n    // Error based on credential\n    setDataBasedOnError() {\n        this.authenticationError = true;\n        this.username = app_constants_1.BLANK;\n        this.password = app_constants_1.BLANK;\n    }\n    redirectToLogin(redirect) {\n        if (redirect) {\n            this.stateStorageService.storeUrl(null);\n            this.router.navigateByUrl(redirect);\n        }\n    }\n    getEvent() {\n        return {\n            name: app_constants_1.AUTHENTICATION_SUCCESS,\n            content: app_constants_1.SEND_AUTH_SUCCESS\n        };\n    }\n    // Navigate to dashboard after login\n    navigationBasedOnCreditial() {\n        this.router.navigate([app_constants_1.DASHBOARD_URL]);\n        if (this.router.url === app_constants_1.REGISTER_URL || /^\\/activate\\//.test(this.router.url) || /^\\/reset\\//.test(this.router.url)) {\n            this.router.navigate(['']);\n        }\n    }\n    // Getting credential for login\n    getCrendiential() {\n        return {\n            username: this.username,\n            password: this.password,\n            rememberMe: true\n        };\n    }\n    // Navigate to register page\n    register() {\n        this.router.navigate([app_constants_1.REGISTER_URL]);\n    }\n    // Request Reset Password\n    requestResetPassword() {\n        this.router.navigate([app_constants_1.REST, app_constants_1.REQUEST_URL]);\n    }\n};\nHomeComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-home',\n        templateUrl: './home.component.html',\n        styleUrls: ['home.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_2.AccountService !== \"undefined\" && core_2.AccountService) === \"function\" ? _a : Object, typeof (_b = typeof core_2.LoginModalService !== \"undefined\" && core_2.LoginModalService) === \"function\" ? _b : Object, typeof (_c = typeof ng_jhipster_1.JhiEventManager !== \"undefined\" && ng_jhipster_1.JhiEventManager) === \"function\" ? _c : Object, typeof (_d = typeof login_service_1.LoginService !== \"undefined\" && login_service_1.LoginService) === \"function\" ? _d : Object, typeof (_e = typeof state_storage_service_1.StateStorageService !== \"undefined\" && state_storage_service_1.StateStorageService) === \"function\" ? _e : Object, typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _f : Object])\n], HomeComponent);\nexports.HomeComponent = HomeComponent;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/home/home.component.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/home/home.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {JhiEventManager} from 'ng-jhipster';\n\nimport {Account, AccountService, LoginModalService} from 'app/core';\nimport {Router} from '@angular/router';\nimport {LoginService} from 'app/core/login/login.service';\nimport {StateStorageService} from 'app/core/auth/state-storage.service';\nimport {\n    AUTHENTICATION_SUCCESS,\n    BLANK,\n    DASHBOARD_URL,\n    REGISTER_URL,\n    REQUEST_URL,\n    REST,\n    SEND_AUTH_SUCCESS\n} from 'app/app.constants';\n\n@Component({\n    selector: 'jhi-home',\n    templateUrl: './home.component.html',\n    styleUrls: ['home.scss']\n})\nexport class HomeComponent implements OnInit {\n    authenticationError: boolean;\n\n    username: String;\n    password: String;\n    account: Account;\n\n    constructor(\n        private accountService: AccountService,\n        private loginModalService: LoginModalService,\n        private eventManager: JhiEventManager,\n        private loginService: LoginService,\n        private stateStorageService: StateStorageService,\n        private router: Router,\n    ) {\n    }\n\n    ngOnInit() {\n        this.accountService.identity().then((account: Account) => {\n            this.account = account;\n        });\n        this.registerAuthenticationSuccess();\n    }\n\n    // If Registeration is success\n    registerAuthenticationSuccess() {\n        this.eventManager.subscribe(AUTHENTICATION_SUCCESS, message => {\n            this.accountService.identity().then(account => {\n                this.account = account;\n            });\n        });\n    }\n\n    cancel() {\n        this.authenticationError = false;\n        this.username = '';\n        this.password = '';\n    }\n\n    // login\n    login() {\n        this.loginService\n            .login(this.getCrendiential())\n            .then(() => {\n                this.authenticationError = false;\n                this.navigationBasedOnCreditial();\n                this.eventManager.broadcast(this.getEvent());\n                // previousState was set in the authExpiredInterceptor before being redirected to login modal.\n                // since login is successful, go to stored previousState and clear previousState\n                const redirect = this.stateStorageService.getUrl();\n                this.redirectToLogin(redirect);\n            })\n            .catch(() => {\n                this.setDataBasedOnError();\n            });\n    }\n\n    // Error based on credential\n    private setDataBasedOnError() {\n        this.authenticationError = true;\n        this.username = BLANK;\n        this.password = BLANK;\n    }\n\n    private redirectToLogin(redirect) {\n        if (redirect) {\n            this.stateStorageService.storeUrl(null);\n            this.router.navigateByUrl(redirect);\n        }\n    }\n\n    private getEvent() {\n        return {\n            name: AUTHENTICATION_SUCCESS,\n            content: SEND_AUTH_SUCCESS\n        };\n    }\n\n    // Navigate to dashboard after login\n    private navigationBasedOnCreditial() {\n        this.router.navigate([DASHBOARD_URL]);\n        if (this.router.url === REGISTER_URL || /^\\/activate\\//.test(this.router.url) || /^\\/reset\\//.test(this.router.url)) {\n            this.router.navigate(['']);\n        }\n    }\n\n    // Getting credential for login\n    private getCrendiential() {\n        return {\n            username: this.username,\n            password: this.password,\n            rememberMe: true\n        };\n    }\n\n    // Navigate to register page\n    register() {\n        this.router.navigate([REGISTER_URL]);\n    }\n\n    // Request Reset Password\n    requestResetPassword() {\n        this.router.navigate([REST, REQUEST_URL]);\n    }\n}\n"]}]}