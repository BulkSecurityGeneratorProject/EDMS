{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/account/register/register.component.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/account/register/register.component.ts","mtime":1573033582429},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e;\nconst core_1 = require(\"@angular/core\");\nconst forms_1 = require(\"@angular/forms\");\nconst shared_1 = require(\"app/shared\");\nconst core_2 = require(\"app/core\");\nconst register_service_1 = require(\"./register.service\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet RegisterComponent = class RegisterComponent {\n    constructor(loginModalService, registerService, elementRef, renderer, fb) {\n        this.loginModalService = loginModalService;\n        this.registerService = registerService;\n        this.elementRef = elementRef;\n        this.renderer = renderer;\n        this.fb = fb;\n        this.registerForm = this.fb.group({\n            login: ['', [forms_1.Validators.required, forms_1.Validators.minLength(1), forms_1.Validators.maxLength(50), forms_1.Validators.pattern(app_constants_1.ALPHABET_NUMBER_PATTERN)]],\n            email: ['', [forms_1.Validators.required, forms_1.Validators.minLength(5), forms_1.Validators.maxLength(254), forms_1.Validators.email]],\n            password: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]],\n            confirmPassword: ['', [forms_1.Validators.required, forms_1.Validators.minLength(4), forms_1.Validators.maxLength(50)]]\n        });\n    }\n    ngOnInit() {\n        this.success = false;\n    }\n    ngAfterViewInit() {\n        this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector(app_constants_1.LOGIN), app_constants_1.FOCUS, []);\n    }\n    register() {\n        let registerAccount = {};\n        const login = this.registerForm.get([app_constants_1.LOGIN_LOWER_CASE]).value;\n        const email = this.registerForm.get([app_constants_1.EMAIL_LOWER_CASE]).value;\n        const password = this.registerForm.get([app_constants_1.PASSWORD_LOWER_CASE]).value;\n        if (password !== this.registerForm.get([app_constants_1.CONFIRM_PASSWORD]).value) {\n            this.doNotMatch = app_constants_1.ERROR_;\n        }\n        else {\n            registerAccount = Object.assign({}, registerAccount, { login, email, password });\n            this.doNotMatch = null;\n            this.error = null;\n            this.errorUserExists = null;\n            this.errorEmailExists = null;\n            registerAccount = Object.assign({}, registerAccount, { langKey: app_constants_1.EN });\n            this.registerService.save(registerAccount).subscribe(() => {\n                this.success = true;\n            }, response => this.processError(response));\n        }\n    }\n    openLogin() {\n        this.modalRef = this.loginModalService.open();\n    }\n    processError(response) {\n        this.success = null;\n        if (response.status === 400 && response.error.type === shared_1.LOGIN_ALREADY_USED_TYPE) {\n            this.errorUserExists = app_constants_1.ERROR_;\n        }\n        else if (response.status === 400 && response.error.type === shared_1.EMAIL_ALREADY_USED_TYPE) {\n            this.errorEmailExists = app_constants_1.ERROR_;\n        }\n        else {\n            this.error = app_constants_1.ERROR_;\n        }\n    }\n};\nRegisterComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-register',\n        templateUrl: './register.component.html'\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof core_2.LoginModalService !== \"undefined\" && core_2.LoginModalService) === \"function\" ? _a : Object, typeof (_b = typeof register_service_1.Register !== \"undefined\" && register_service_1.Register) === \"function\" ? _b : Object, typeof (_c = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _c : Object, typeof (_d = typeof core_1.Renderer !== \"undefined\" && core_1.Renderer) === \"function\" ? _d : Object, typeof (_e = typeof forms_1.FormBuilder !== \"undefined\" && forms_1.FormBuilder) === \"function\" ? _e : Object])\n], RegisterComponent);\nexports.RegisterComponent = RegisterComponent;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/account/register/register.component.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/account/register/register.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, AfterViewInit, Renderer, ElementRef } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap';\n\nimport { EMAIL_ALREADY_USED_TYPE, LOGIN_ALREADY_USED_TYPE } from 'app/shared';\nimport { LoginModalService } from 'app/core';\nimport { Register } from './register.service';\nimport { ALPHABET_NUMBER_PATTERN, LOGIN, FOCUS, LOGIN_LOWER_CASE, EMAIL_LOWER_CASE, PASSWORD_LOWER_CASE, CONFIRM_PASSWORD, ERROR_, EN } from 'app/app.constants';\n\n@Component({\n  selector: 'jhi-register',\n  templateUrl: './register.component.html'\n})\nexport class RegisterComponent implements OnInit, AfterViewInit {\n  doNotMatch: string;\n  error: string;\n  errorEmailExists: string;\n  errorUserExists: string;\n  success: boolean;\n  modalRef: NgbModalRef;\n\n  registerForm = this.fb.group({\n    login: ['', [Validators.required, Validators.minLength(1), Validators.maxLength(50), Validators.pattern(ALPHABET_NUMBER_PATTERN)]],\n    email: ['', [Validators.required, Validators.minLength(5), Validators.maxLength(254), Validators.email]],\n    password: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]],\n    confirmPassword: ['', [Validators.required, Validators.minLength(4), Validators.maxLength(50)]]\n  });\n\n  constructor(\n    private loginModalService: LoginModalService,\n    private registerService: Register,\n    private elementRef: ElementRef,\n    private renderer: Renderer,\n    private fb: FormBuilder\n  ) {}\n\n  ngOnInit() {\n    this.success = false;\n  }\n\n  ngAfterViewInit() {\n    this.renderer.invokeElementMethod(this.elementRef.nativeElement.querySelector(LOGIN), FOCUS, []);\n  }\n\n  register() {\n    let registerAccount = {};\n    const login = this.registerForm.get([LOGIN_LOWER_CASE]).value;\n    const email = this.registerForm.get([EMAIL_LOWER_CASE]).value;\n    const password = this.registerForm.get([PASSWORD_LOWER_CASE]).value;\n    if (password !== this.registerForm.get([CONFIRM_PASSWORD]).value) {\n      this.doNotMatch = ERROR_;\n    } else {\n      registerAccount = { ...registerAccount, login, email, password };\n      this.doNotMatch = null;\n      this.error = null;\n      this.errorUserExists = null;\n      this.errorEmailExists = null;\n      registerAccount = { ...registerAccount, langKey: EN };\n\n      this.registerService.save(registerAccount).subscribe(\n        () => {\n          this.success = true;\n        },\n        response => this.processError(response)\n      );\n    }\n  }\n\n  openLogin() {\n    this.modalRef = this.loginModalService.open();\n  }\n\n  private processError(response: HttpErrorResponse) {\n    this.success = null;\n    if (response.status === 400 && response.error.type === LOGIN_ALREADY_USED_TYPE) {\n      this.errorUserExists = ERROR_;\n    } else if (response.status === 400 && response.error.type === EMAIL_ALREADY_USED_TYPE) {\n      this.errorEmailExists = ERROR_;\n    } else {\n      this.error = ERROR_;\n    }\n  }\n}\n"]}]}