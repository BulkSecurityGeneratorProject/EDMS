{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional-history/professional-history.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/entities/professional-history/professional-history.service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst moment = require(\"moment\");\nconst input_constants_1 = require(\"app/shared/constants/input.constants\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst shared_1 = require(\"app/shared\");\nlet ProfessionalHistoryService = class ProfessionalHistoryService {\n    constructor(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + app_constants_1.API_PROFESSIONAL_HISTORIES_URL;\n        this.resourceUrlHistory = app_constants_1.SERVER_API_URL + app_constants_1.API_PROFESSIONAL_HISTORIES_BY_PID_URL;\n    }\n    create(professionalHistory) {\n        const copy = this.convertDateFromClient(professionalHistory);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    update(professionalHistory) {\n        const copy = this.convertDateFromClient(professionalHistory);\n        return this.http\n            .put(this.resourceUrl, copy, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    find(id) {\n        return this.http\n            .get(`${this.resourceUrl}/${id}`, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    findbyPid(id) {\n        return this.http\n            .get(`${this.resourceUrlHistory}/${id}`, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    query(req) {\n        const options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: app_constants_1.RESPONSE });\n    }\n    convertDateFromClient(professionalHistory) {\n        const copy = Object.assign({}, professionalHistory, {\n            currentProjectStartDate: professionalHistory.currentProjectStartDate != null && professionalHistory.currentProjectStartDate.isValid()\n                ? professionalHistory.currentProjectStartDate.format(input_constants_1.DATE_FORMAT)\n                : null,\n            currentProjectEndDate: professionalHistory.currentProjectEndDate != null && professionalHistory.currentProjectEndDate.isValid()\n                ? professionalHistory.currentProjectEndDate.format(input_constants_1.DATE_FORMAT)\n                : null,\n            createdDate: professionalHistory.createdDate != null && professionalHistory.createdDate.isValid()\n                ? professionalHistory.createdDate.format(input_constants_1.DATE_FORMAT)\n                : null,\n            updatedDate: professionalHistory.updatedDate != null && professionalHistory.updatedDate.isValid()\n                ? professionalHistory.updatedDate.format(input_constants_1.DATE_FORMAT)\n                : null\n        });\n        return copy;\n    }\n    convertDateFromServer(res) {\n        if (res.body) {\n            res.body.currentProjectStartDate = res.body.currentProjectStartDate != null ? moment(res.body.currentProjectStartDate) : null;\n            res.body.currentProjectEndDate = res.body.currentProjectEndDate != null ? moment(res.body.currentProjectEndDate) : null;\n            res.body.createdDate = res.body.createdDate != null ? moment(res.body.createdDate) : null;\n            res.body.updatedDate = res.body.updatedDate != null ? moment(res.body.updatedDate) : null;\n        }\n        return res;\n    }\n    convertDateArrayFromServer(res) {\n        if (res.body) {\n            res.body.forEach((professionalHistory) => {\n                professionalHistory.currentProjectStartDate =\n                    professionalHistory.currentProjectStartDate != null ? moment(professionalHistory.currentProjectStartDate) : null;\n                professionalHistory.currentProjectEndDate =\n                    professionalHistory.currentProjectEndDate != null ? moment(professionalHistory.currentProjectEndDate) : null;\n                professionalHistory.createdDate = professionalHistory.createdDate != null ? moment(professionalHistory.createdDate) : null;\n                professionalHistory.updatedDate = professionalHistory.updatedDate != null ? moment(professionalHistory.updatedDate) : null;\n            });\n        }\n        return res;\n    }\n};\nProfessionalHistoryService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], ProfessionalHistoryService);\nexports.ProfessionalHistoryService = ProfessionalHistoryService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/entities/professional-history/professional-history.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional-history/professional-history.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport * as moment from 'moment';\nimport {DATE_FORMAT} from 'app/shared/constants/input.constants';\nimport {map} from 'rxjs/operators';\n\nimport {\n    API_PROFESSIONAL_HISTORIES_BY_PID_URL,\n    API_PROFESSIONAL_HISTORIES_URL,\n    RESPONSE,\n    SERVER_API_URL\n} from 'app/app.constants';\nimport {createRequestOption} from 'app/shared';\nimport {IProfessionalHistory} from 'app/shared/model/professional-history.model';\n\ntype EntityResponseType = HttpResponse<IProfessionalHistory>;\ntype EntityArrayResponseType = HttpResponse<IProfessionalHistory[]>;\n\n@Injectable({providedIn: 'root'})\nexport class ProfessionalHistoryService {\n    public resourceUrl = SERVER_API_URL + API_PROFESSIONAL_HISTORIES_URL;\n    public resourceUrlHistory = SERVER_API_URL + API_PROFESSIONAL_HISTORIES_BY_PID_URL;\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(professionalHistory: IProfessionalHistory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(professionalHistory);\n        return this.http\n            .post<IProfessionalHistory>(this.resourceUrl, copy, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(professionalHistory: IProfessionalHistory): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(professionalHistory);\n        return this.http\n            .put<IProfessionalHistory>(this.resourceUrl, copy, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<IProfessionalHistory>(`${this.resourceUrl}/${id}`, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    findbyPid(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<IProfessionalHistory>(`${this.resourceUrlHistory}/${id}`, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<IProfessionalHistory[]>(this.resourceUrl, {params: options, observe: RESPONSE})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: RESPONSE});\n    }\n\n    protected convertDateFromClient(professionalHistory: IProfessionalHistory): IProfessionalHistory {\n        const copy: IProfessionalHistory = Object.assign({}, professionalHistory, {\n            currentProjectStartDate:\n                professionalHistory.currentProjectStartDate != null && professionalHistory.currentProjectStartDate.isValid()\n                    ? professionalHistory.currentProjectStartDate.format(DATE_FORMAT)\n                    : null,\n            currentProjectEndDate:\n                professionalHistory.currentProjectEndDate != null && professionalHistory.currentProjectEndDate.isValid()\n                    ? professionalHistory.currentProjectEndDate.format(DATE_FORMAT)\n                    : null,\n            createdDate:\n                professionalHistory.createdDate != null && professionalHistory.createdDate.isValid()\n                    ? professionalHistory.createdDate.format(DATE_FORMAT)\n                    : null,\n            updatedDate:\n                professionalHistory.updatedDate != null && professionalHistory.updatedDate.isValid()\n                    ? professionalHistory.updatedDate.format(DATE_FORMAT)\n                    : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.currentProjectStartDate = res.body.currentProjectStartDate != null ? moment(res.body.currentProjectStartDate) : null;\n            res.body.currentProjectEndDate = res.body.currentProjectEndDate != null ? moment(res.body.currentProjectEndDate) : null;\n            res.body.createdDate = res.body.createdDate != null ? moment(res.body.createdDate) : null;\n            res.body.updatedDate = res.body.updatedDate != null ? moment(res.body.updatedDate) : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((professionalHistory: IProfessionalHistory) => {\n                professionalHistory.currentProjectStartDate =\n                    professionalHistory.currentProjectStartDate != null ? moment(professionalHistory.currentProjectStartDate) : null;\n                professionalHistory.currentProjectEndDate =\n                    professionalHistory.currentProjectEndDate != null ? moment(professionalHistory.currentProjectEndDate) : null;\n                professionalHistory.createdDate = professionalHistory.createdDate != null ? moment(professionalHistory.createdDate) : null;\n                professionalHistory.updatedDate = professionalHistory.updatedDate != null ? moment(professionalHistory.updatedDate) : null;\n            });\n        }\n        return res;\n    }\n}\n"]}]}