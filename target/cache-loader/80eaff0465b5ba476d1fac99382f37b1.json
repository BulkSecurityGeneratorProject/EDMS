{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional.service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst moment = require(\"moment\");\nconst input_constants_1 = require(\"app/shared/constants/input.constants\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst shared_1 = require(\"app/shared\");\nlet ProfessionalService = class ProfessionalService {\n    constructor(http) {\n        this.http = http;\n        this.resourceUrl = app_constants_1.SERVER_API_URL + app_constants_1.PROFESSIONAL_API_URL;\n    }\n    create(professional) {\n        const copy = this.convertDateFromClient(professional);\n        return this.http\n            .post(this.resourceUrl, copy, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    update(professional) {\n        const copy = this.convertDateFromClient(professional);\n        // cpd  = (professional.currentProjectStartDate).toString;\n        return this.http\n            .put(this.resourceUrl, copy, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    find(id) {\n        return this.http\n            .get(`${this.resourceUrl}/${id}`, { observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateFromServer(res)));\n    }\n    query(req) {\n        const options = shared_1.createRequestOption(req);\n        return this.http\n            .get(this.resourceUrl, { params: options, observe: app_constants_1.RESPONSE })\n            .pipe(operators_1.map((res) => this.convertDateArrayFromServer(res)));\n    }\n    delete(id) {\n        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: app_constants_1.RESPONSE });\n    }\n    convertDateFromClient(professional) {\n        const copy = Object.assign({}, professional, {\n            currentProjectStartDate: professional.currentProjectStartDate != null && moment(professional.currentProjectStartDate).isValid()\n                ? moment(professional.currentProjectStartDate).format(input_constants_1.DATE_FORMAT)\n                : null,\n            currentProjectEndDate: professional.currentProjectEndDate != null && moment(professional.currentProjectEndDate).isValid()\n                ? moment(professional.currentProjectEndDate).format(input_constants_1.DATE_FORMAT)\n                : null,\n            createdDate: professional.createdDate != null && moment(professional.createdDate).isValid() ? moment(professional.createdDate).format(input_constants_1.DATE_FORMAT) : null,\n            updatedDate: professional.updatedDate != null && moment(professional.updatedDate).isValid() ? moment(professional.updatedDate).format(input_constants_1.DATE_FORMAT) : null\n        });\n        return copy;\n    }\n    convertDateFromServer(res) {\n        if (res.body) {\n            res.body.currentProjectStartDate = res.body.currentProjectStartDate != null ? res.body.currentProjectStartDate : null;\n            res.body.currentProjectEndDate = res.body.currentProjectEndDate != null ? res.body.currentProjectEndDate : null;\n            res.body.createdDate = res.body.createdDate != null ? res.body.createdDate : null;\n            res.body.updatedDate = res.body.updatedDate != null ? res.body.updatedDate : null;\n        }\n        return res;\n    }\n    convertDateArrayFromServer(res) {\n        if (res.body) {\n            res.body.forEach((professional) => {\n                professional.currentProjectStartDate =\n                    professional.currentProjectStartDate != null ? moment(professional.currentProjectStartDate) : null;\n                professional.currentProjectEndDate = professional.currentProjectEndDate != null ? moment(professional.currentProjectEndDate) : null;\n                professional.createdDate = professional.createdDate != null ? moment(professional.createdDate) : null;\n                professional.updatedDate = professional.updatedDate != null ? moment(professional.updatedDate) : null;\n            });\n        }\n        return res;\n    }\n    dropDown() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.UPDATE_DROP_DOWN_URL);\n    }\n    getEmployee(result) {\n        return this.http.post(app_constants_1.SERVER_API_URL + app_constants_1.SEARCH_API_URL, result);\n    }\n    // Method for Generating Searched Employee Details To Excel\n    exportasExcel(requestObject, columns) {\n        // tslint:disable-next-line:prefer-const\n        let object = {};\n        object['searchVm'] = requestObject;\n        object['colunm'] = columns;\n        return this.http.post(app_constants_1.SERVER_API_URL + app_constants_1.DOWNLOAD_EXCEL_URL, object, {\n            responseType: 'blob'\n        });\n    }\n    // Method for Generating Searched Employee Details To Gmail\n    exportMail(requestObject, columns) {\n        // tslint:disable-next-line:prefer-const\n        let Robject = {};\n        Robject['searchVm'] = requestObject;\n        Robject['colunm'] = columns;\n        return this.http\n            .post(app_constants_1.SERVER_API_URL + app_constants_1.MAIL_API_URL, Robject, {\n            responseType: 'blob'\n        })\n            .subscribe((result) => {\n            alert(app_constants_1.REPORT_SEND_SUCCESSFULLY_MSG);\n        }, error => {\n            if (error.status === app_constants_1.STATUS_400) {\n                alert(app_constants_1.UNABLE_SEND_REPORT_MSG);\n            }\n        });\n    }\n};\nProfessionalService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], ProfessionalService);\nexports.ProfessionalService = ProfessionalService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional.service.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable} from '@angular/core';\nimport {HttpClient, HttpResponse} from '@angular/common/http';\nimport {Observable} from 'rxjs';\nimport * as moment from 'moment';\nimport {DATE_FORMAT} from 'app/shared/constants/input.constants';\nimport {map} from 'rxjs/operators';\nimport {\n    DOWNLOAD_EXCEL_URL,\n    MAIL_API_URL, PROFESSIONAL_API_URL,\n    REPORT_SEND_SUCCESSFULLY_MSG,\n    RESPONSE,\n    SEARCH_API_URL,\n    SERVER_API_URL,\n    STATUS_400,\n    UNABLE_SEND_REPORT_MSG, UPDATE_DROP_DOWN_URL\n} from 'app/app.constants';\nimport {createRequestOption} from 'app/shared';\nimport {IProfessional} from 'app/shared/model/professional.model';\n\ntype EntityResponseType = HttpResponse<IProfessional>;\ntype EntityArrayResponseType = HttpResponse<IProfessional[]>;\n\n@Injectable({providedIn: 'root'})\nexport class ProfessionalService {\n    public resourceUrl = SERVER_API_URL + PROFESSIONAL_API_URL;\n\n    constructor(protected http: HttpClient) {\n    }\n\n    create(professional: IProfessional): Observable<EntityResponseType> {\n        const copy = this.convertDateFromClient(professional);\n        return this.http\n            .post<IProfessional>(this.resourceUrl, copy, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    update(professional: IProfessional): Observable<EntityResponseType> {\n         const copy = this.convertDateFromClient(professional);\n        // cpd  = (professional.currentProjectStartDate).toString;\n        return this.http\n            .put<IProfessional>(this.resourceUrl, copy, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    find(id: number): Observable<EntityResponseType> {\n        return this.http\n            .get<IProfessional>(`${this.resourceUrl}/${id}`, {observe: RESPONSE})\n            .pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)));\n    }\n\n    query(req?: any): Observable<EntityArrayResponseType> {\n        const options = createRequestOption(req);\n        return this.http\n            .get<IProfessional[]>(this.resourceUrl, {params: options, observe: RESPONSE})\n            .pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)));\n    }\n\n    delete(id: number): Observable<HttpResponse<any>> {\n        return this.http.delete<any>(`${this.resourceUrl}/${id}`, {observe: RESPONSE});\n    }\n\n    protected convertDateFromClient(professional: IProfessional): IProfessional {\n        const copy: IProfessional = Object.assign({}, professional, {\n            currentProjectStartDate:\n                professional.currentProjectStartDate != null && moment(professional.currentProjectStartDate).isValid()\n                    ? moment(professional.currentProjectStartDate).format(DATE_FORMAT)\n                    : null,\n            currentProjectEndDate:\n                professional.currentProjectEndDate != null && moment(professional.currentProjectEndDate).isValid()\n                    ? moment(professional.currentProjectEndDate).format(DATE_FORMAT)\n                    : null,\n            createdDate:\n                professional.createdDate != null && moment(professional.createdDate).isValid() ? moment(professional.createdDate).format(DATE_FORMAT) : null,\n            updatedDate:\n                professional.updatedDate != null && moment(professional.updatedDate).isValid() ? moment(professional.updatedDate).format(DATE_FORMAT) : null\n        });\n        return copy;\n    }\n\n    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {\n        if (res.body) {\n            res.body.currentProjectStartDate = res.body.currentProjectStartDate != null ? res.body.currentProjectStartDate : null;\n            res.body.currentProjectEndDate = res.body.currentProjectEndDate != null ? res.body.currentProjectEndDate : null;\n            res.body.createdDate = res.body.createdDate != null ? res.body.createdDate : null;\n            res.body.updatedDate = res.body.updatedDate != null ? res.body.updatedDate : null;\n        }\n        return res;\n    }\n\n    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {\n        if (res.body) {\n            res.body.forEach((professional: IProfessional) => {\n                professional.currentProjectStartDate =\n                    professional.currentProjectStartDate != null ? moment(professional.currentProjectStartDate) : null;\n                professional.currentProjectEndDate = professional.currentProjectEndDate != null ? moment(professional.currentProjectEndDate) : null;\n                professional.createdDate = professional.createdDate != null ? moment(professional.createdDate) : null;\n                professional.updatedDate = professional.updatedDate != null ? moment(professional.updatedDate) : null;\n            });\n        }\n        return res;\n    }\n\n    dropDown() {\n        return this.http.get(SERVER_API_URL + UPDATE_DROP_DOWN_URL);\n    }\n\n    getEmployee(result) {\n        return this.http.post(SERVER_API_URL + SEARCH_API_URL, result);\n    }\n\n    // Method for Generating Searched Employee Details To Excel\n    exportasExcel(requestObject, columns) {\n        // tslint:disable-next-line:prefer-const\n        let object = {};\n        object['searchVm'] = requestObject;\n        object['colunm'] = columns;\n        return this.http.post(SERVER_API_URL + DOWNLOAD_EXCEL_URL, object, {\n            responseType: 'blob' as 'json'\n        });\n    }\n\n    // Method for Generating Searched Employee Details To Gmail\n    exportMail(requestObject, columns) {\n        // tslint:disable-next-line:prefer-const\n        let Robject = {};\n        Robject['searchVm'] = requestObject;\n        Robject['colunm'] = columns;\n        return this.http\n            .post(SERVER_API_URL + MAIL_API_URL, Robject, {\n                responseType: 'blob' as 'json'\n            })\n            .subscribe(\n                (result: any) => {\n                    alert(REPORT_SEND_SUCCESSFULLY_MSG);\n                },\n                error => {\n                    if (error.status === STATUS_400) {\n                        alert(UNABLE_SEND_REPORT_MSG);\n                    }\n                }\n            );\n    }\n}\n"]}]}