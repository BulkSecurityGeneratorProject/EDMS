{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional-update.component.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional-update.component.ts","mtime":1575623211883},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst forms_1 = require(\"@angular/forms\");\nconst router_1 = require(\"@angular/router\");\nconst professional_model_1 = require(\"app/shared/model/professional.model\");\nconst professional_service_1 = require(\"./professional.service\");\nconst employee_model_1 = require(\"app/shared/model/employee.model\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst sweetalert2_1 = require(\"sweetalert2\");\nconst configure_model_1 = require(\"app/shared/model/configure.model\");\nconst moment = require(\"moment\");\nlet ProfessionalUpdateComponent = class ProfessionalUpdateComponent {\n    constructor(professionalService, activatedRoute, router, http, fb) {\n        this.professionalService = professionalService;\n        this.activatedRoute = activatedRoute;\n        this.router = router;\n        this.http = http;\n        this.fb = fb;\n        // editForm not using but Dont delete because using in test\n        this.editForm = this.fb.group({\n            id: [],\n            location: [null, [forms_1.Validators.required]],\n            totalExperience: [null, [forms_1.Validators.required]],\n            jobTitle: [],\n            typeOfRole: [],\n            skillCategory: [],\n            specificSkills: [],\n            generalSkills: [],\n            clientDomain: [null, [forms_1.Validators.required]],\n            mode: [],\n            employer: [null, [forms_1.Validators.required]],\n            primeVendor: [null, [forms_1.Validators.required]],\n            endClient: [null, [forms_1.Validators.required]],\n            currentProjectStartDate: [],\n            currentProjectEndDate: [],\n            remarks: [],\n            createdBy: [],\n            createdDate: [],\n            updatedBy: [],\n            updatedDate: [],\n            employee: []\n        });\n    }\n    ngOnInit() {\n        this.getDataFromUpdateFropDownUrl();\n        this.isSaving = false;\n        this.id = this.activatedRoute.snapshot.paramMap.get(app_constants_1.ID);\n        if (this.id !== undefined && this.id !== null) {\n            this.professionalService.find(this.id).subscribe(res => {\n                this.professional = res.body;\n            });\n        }\n        else {\n            this.professional = new professional_model_1.Professional();\n            this.professional.employee = new employee_model_1.Employee();\n            this.professional.employee.empType = new configure_model_1.Configure();\n            this.professional.employee.status = new configure_model_1.Configure();\n            this.professional.workAuthorization = new configure_model_1.Configure();\n            this.professional.jobTitle = new configure_model_1.Configure();\n            this.professional.location = new configure_model_1.Configure();\n            this.professional.mode = new configure_model_1.Configure();\n            this.professional.payType = new configure_model_1.Configure();\n            this.professional.clientDomain = new configure_model_1.Configure();\n            this.professional.endClient = new configure_model_1.Configure();\n            this.professional.employer = new configure_model_1.Configure();\n            this.professional.primeVendor = new configure_model_1.Configure();\n        }\n    }\n    // Getting Data from Dropdown from back end\n    getDataFromUpdateFropDownUrl() {\n        this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.UPDATE_DROP_DOWN_URL).subscribe(res => {\n            // console.log('dropdowns  ', res);\n            this.setDataFromUpdateDropDownurlResponse(res);\n        });\n    }\n    // Data from Update Dropdown\n    setDataFromUpdateDropDownurlResponse(res) {\n        this.dropDown = res;\n        this.domainList = this.dropDown.domainList;\n        this.locationList = this.dropDown.location;\n        this.jobTitleList = this.dropDown.jobTitle;\n        this.statusList = this.dropDown.status;\n        this.endClientList = this.dropDown.endClient;\n        this.empTypeList = this.dropDown.empType;\n        this.modeList = this.dropDown.mode;\n        this.employerList = this.dropDown.employer;\n        this.primeVendorList = this.dropDown.primeVendor;\n        this.workAuthorizationList = this.dropDown.workAuthorization;\n        this.payTypeList = this.dropDown.payType;\n    }\n    // updateForm not using but dont delete using in test\n    // This method is un-used for now.\n    updateForm(professional) {\n        this.editForm.patchValue({\n            id: professional.id,\n            location: professional.location,\n            totalExperience: professional.totalExperience,\n            title: professional.jobTitle,\n            typeOfRole: professional.typeOfRole,\n            skillCategory: professional.skillCategory,\n            specificSkills: professional.specificSkills,\n            generalSkills: professional.generalSkills,\n            clientDomain: professional.clientDomain,\n            mode: professional.mode,\n            employer: professional.employer,\n            primeVendor: professional.primeVendor,\n            endClient: professional.endClient,\n            currentProjectStartDate: professional.currentProjectStartDate,\n            currentProjectEndDate: professional.currentProjectEndDate,\n            remarks: professional.remarks,\n            createdBy: professional.createdBy,\n            createdDate: professional.createdDate,\n            updatedBy: professional.updatedBy,\n            updatedDate: professional.updatedDate,\n            employee: professional.employee\n        });\n    }\n    // Back to previous page\n    previousState() {\n        window.history.back();\n    }\n    // Checking Date of Birth and saving\n    save() {\n        if (this.checkDob()) {\n            return;\n        }\n        this.isSaving = true;\n        if (this.professional.id !== undefined) {\n            this.subscribeToEditResponse(this.professionalService.update(this.professional));\n        }\n        else {\n            // console.log('create', this.professional);\n            this.subscribeToSaveResponse(this.professionalService.create(this.professional));\n        }\n    }\n    // checks Date of Birth it should not accept future date\n    checkDob() {\n        if (this.professional.employee.dob !== null || this.professional.employee.dob !== undefined) {\n            if (moment(this.professional.employee.dob).isAfter(moment())) {\n                // alert(DATE_BIRTH_MSG);\n                sweetalert2_1.default.fire('Oops...', app_constants_1.DATE_BIRTH_MSG, app_constants_1.WARNING);\n                return true;\n            }\n        }\n        return false;\n    }\n    subscribeToSaveResponse(result) {\n        result.subscribe((res) => this.onSaveSuccess(), (res) => this.onSaveError());\n    }\n    subscribeToEditResponse(result) {\n        result.subscribe((res) => {\n            console.log('result', res);\n            this.onEditSuccess();\n        }, (res) => this.onSaveError());\n    }\n    onSaveSuccess() {\n        // alert(EMPLOYEE_SUCCESS_MSG);\n        sweetalert2_1.default.fire(app_constants_1.BLANK, app_constants_1.EMPLOYEE_SUCCESS_MSG, app_constants_1.SUCCESS);\n        this.professional = new professional_model_1.Professional();\n        this.professional.employee = new employee_model_1.Employee();\n        this.isSaving = false;\n        this.router.navigate([app_constants_1.BASHBOARD_URL]);\n    }\n    onEditSuccess() {\n        // alert(EMPLOYEE_UPDATE_MSG);\n        sweetalert2_1.default.fire(app_constants_1.BLANK, app_constants_1.EMPLOYEE_UPDATE_MSG, app_constants_1.SUCCESS);\n        this.isSaving = false;\n        this.router.navigate([app_constants_1.BASHBOARD_URL]);\n    }\n    onSaveError() {\n        this.isSaving = false;\n    }\n};\nProfessionalUpdateComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-professional-update',\n        templateUrl: './professional-update.component.html',\n        styleUrls: ['./professional-update.component.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof professional_service_1.ProfessionalService !== \"undefined\" && professional_service_1.ProfessionalService) === \"function\" ? _a : Object, typeof (_b = typeof router_1.ActivatedRoute !== \"undefined\" && router_1.ActivatedRoute) === \"function\" ? _b : Object, typeof (_c = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _c : Object, typeof (_d = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _d : Object, typeof (_e = typeof forms_1.FormBuilder !== \"undefined\" && forms_1.FormBuilder) === \"function\" ? _e : Object])\n], ProfessionalUpdateComponent);\nexports.ProfessionalUpdateComponent = ProfessionalUpdateComponent;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional-update.component.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/entities/professional/professional-update.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit} from '@angular/core';\nimport {HttpClient, HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {FormBuilder, Validators} from '@angular/forms';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Observable} from 'rxjs';\nimport {IProfessional, Professional} from 'app/shared/model/professional.model';\nimport {ProfessionalService} from './professional.service';\nimport {Employee, IEmployee} from 'app/shared/model/employee.model';\nimport {\n    BASHBOARD_URL,\n    BLANK,\n    DATE_BIRTH_MSG,\n    EMPLOYEE_SUCCESS_MSG,\n    EMPLOYEE_UPDATE_MSG,\n    ID,\n    SERVER_API_URL,\n    SUCCESS,\n    UPDATE_DROP_DOWN_URL,\n    WARNING\n} from 'app/app.constants';\nimport Swal from 'sweetalert2';\nimport {Configure, IConfigure} from 'app/shared/model/configure.model';\nimport moment = require('moment');\n\n@Component({\n    selector: 'jhi-professional-update',\n    templateUrl: './professional-update.component.html',\n    styleUrls: ['./professional-update.component.scss']\n})\nexport class ProfessionalUpdateComponent implements OnInit {\n    professional: IProfessional;\n    employee: IEmployee;\n    isSaving: boolean;\n    public id: any;\n    dropDown: any;\n    domainList: IConfigure[];\n    locationList: IConfigure[];\n    statusList: IConfigure[];\n    endClientList: IConfigure[];\n    modeList: IConfigure[];\n    employerList: IConfigure[];\n    primeVendorList: IConfigure[];\n    workAuthorizationList: IConfigure[];\n    payTypeList: IConfigure[];\n    empTypeList: IConfigure[];\n    jobTitleList: IConfigure[];\n\n    // editForm not using but Dont delete because using in test\n    editForm = this.fb.group({\n        id: [],\n        location: [null, [Validators.required]],\n        totalExperience: [null, [Validators.required]],\n        jobTitle: [],\n        typeOfRole: [],\n        skillCategory: [],\n        specificSkills: [],\n        generalSkills: [],\n        clientDomain: [null, [Validators.required]],\n        mode: [],\n        employer: [null, [Validators.required]],\n        primeVendor: [null, [Validators.required]],\n        endClient: [null, [Validators.required]],\n        currentProjectStartDate: [],\n        currentProjectEndDate: [],\n        remarks: [],\n        createdBy: [],\n        createdDate: [],\n        updatedBy: [],\n        updatedDate: [],\n        employee: []\n    });\n\n    constructor(\n        protected professionalService: ProfessionalService,\n        protected activatedRoute: ActivatedRoute,\n        public router: Router,\n        public http: HttpClient,\n        private fb: FormBuilder\n    ) {\n    }\n\n    ngOnInit() {\n        this.getDataFromUpdateFropDownUrl();\n        this.isSaving = false;\n        this.id = this.activatedRoute.snapshot.paramMap.get(ID);\n        if (this.id !== undefined && this.id !== null) {\n            this.professionalService.find(this.id).subscribe(res => {\n                this.professional = res.body;\n            });\n        } else {\n            this.professional = new Professional();\n            this.professional.employee = new Employee();\n            this.professional.employee.empType = new Configure();\n            this.professional.employee.status = new Configure();\n            this.professional.workAuthorization = new Configure();\n            this.professional.jobTitle = new Configure();\n            this.professional.location = new Configure();\n            this.professional.mode = new Configure();\n            this.professional.payType = new Configure();\n            this.professional.clientDomain = new Configure();\n            this.professional.endClient = new Configure();\n            this.professional.employer = new Configure();\n            this.professional.primeVendor = new Configure();\n\n        }\n    }\n\n    // Getting Data from Dropdown from back end\n    private getDataFromUpdateFropDownUrl() {\n        this.http.get(SERVER_API_URL + UPDATE_DROP_DOWN_URL).subscribe(res => {\n            // console.log('dropdowns  ', res);\n            this.setDataFromUpdateDropDownurlResponse(res);\n        });\n    }\n\n    // Data from Update Dropdown\n    private setDataFromUpdateDropDownurlResponse(res) {\n        this.dropDown = res;\n        this.domainList = this.dropDown.domainList;\n        this.locationList = this.dropDown.location;\n        this.jobTitleList = this.dropDown.jobTitle;\n        this.statusList = this.dropDown.status;\n        this.endClientList = this.dropDown.endClient;\n        this.empTypeList = this.dropDown.empType;\n        this.modeList = this.dropDown.mode;\n        this.employerList = this.dropDown.employer;\n        this.primeVendorList = this.dropDown.primeVendor;\n        this.workAuthorizationList = this.dropDown.workAuthorization;\n        this.payTypeList = this.dropDown.payType;\n    }\n\n// updateForm not using but dont delete using in test\n    // This method is un-used for now.\n    updateForm(professional: IProfessional) {\n        this.editForm.patchValue({\n            id: professional.id,\n            location: professional.location,\n            totalExperience: professional.totalExperience,\n            title: professional.jobTitle,\n            typeOfRole: professional.typeOfRole,\n            skillCategory: professional.skillCategory,\n            specificSkills: professional.specificSkills,\n            generalSkills: professional.generalSkills,\n            clientDomain: professional.clientDomain,\n            mode: professional.mode,\n            employer: professional.employer,\n            primeVendor: professional.primeVendor,\n            endClient: professional.endClient,\n            currentProjectStartDate: professional.currentProjectStartDate,\n            currentProjectEndDate: professional.currentProjectEndDate,\n            remarks: professional.remarks,\n            createdBy: professional.createdBy,\n            createdDate: professional.createdDate,\n            updatedBy: professional.updatedBy,\n            updatedDate: professional.updatedDate,\n            employee: professional.employee\n        });\n    }\n\n    // Back to previous page\n    previousState() {\n        window.history.back();\n    }\n\n    // Checking Date of Birth and saving\n    save() {\n        if (this.checkDob()) {\n            return;\n        }\n        this.isSaving = true;\n        if (this.professional.id !== undefined) {\n            this.subscribeToEditResponse(this.professionalService.update(this.professional));\n        } else {\n            // console.log('create', this.professional);\n            this.subscribeToSaveResponse(this.professionalService.create(this.professional));\n        }\n    }\n\n    // checks Date of Birth it should not accept future date\n    private checkDob() {\n        if (this.professional.employee.dob !== null || this.professional.employee.dob !== undefined) {\n            if (moment(this.professional.employee.dob).isAfter(moment())) {\n                // alert(DATE_BIRTH_MSG);\n                Swal.fire('Oops...', DATE_BIRTH_MSG, WARNING);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    protected subscribeToSaveResponse(result: Observable<HttpResponse<IProfessional>>) {\n        result.subscribe((res: HttpResponse<IProfessional>) => this.onSaveSuccess(), (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    protected subscribeToEditResponse(result: Observable<HttpResponse<IProfessional>>) {\n        result.subscribe((res: HttpResponse<IProfessional>) => {\n            console.log('result', res);\n            this.onEditSuccess(); },\n        (res: HttpErrorResponse) => this.onSaveError());\n    }\n\n    protected onSaveSuccess() {\n        // alert(EMPLOYEE_SUCCESS_MSG);\n        Swal.fire(BLANK, EMPLOYEE_SUCCESS_MSG, SUCCESS);\n        this.professional = new Professional();\n        this.professional.employee = new Employee();\n        this.isSaving = false;\n        this.router.navigate([BASHBOARD_URL]);\n    }\n\n    protected onEditSuccess() {\n        // alert(EMPLOYEE_UPDATE_MSG);\n        Swal.fire(BLANK, EMPLOYEE_UPDATE_MSG, SUCCESS);\n        this.isSaving = false;\n        this.router.navigate([BASHBOARD_URL]);\n    }\n\n    protected onSaveError() {\n        this.isSaving = false;\n    }\n}\n"]}]}