{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/search/search-criteria/search-criteria.component.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/search/search-criteria/search-criteria.component.ts","mtime":1573033582437},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e, _f, _g, _h;\nconst core_1 = require(\"@angular/core\");\nconst router_1 = require(\"@angular/router\");\nconst ng_bootstrap_1 = require(\"@ng-bootstrap/ng-bootstrap\");\nconst file_saver_1 = require(\"file-saver\");\nconst material_1 = require(\"@angular/material\");\nconst column_model_1 = require(\"app/shared/model/column.model\");\nconst core_2 = require(\"app/core\");\nconst professional_service_1 = require(\"app/entities/professional/professional.service\");\nconst search_history_model_1 = require(\"app/shared/model/search-history.model\");\nconst search_history_service_1 = require(\"app/entities/search-history/search-history.service\");\nconst operators_1 = require(\"rxjs/operators\");\nconst ng_jhipster_1 = require(\"ng-jhipster\");\nconst sweetalert2_1 = require(\"sweetalert2\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet SearchCriteriaComponent = class SearchCriteriaComponent {\n    constructor(loginService, professionalService, modalService, router, searchHistoryService, jhiAlertService) {\n        this.loginService = loginService;\n        this.professionalService = professionalService;\n        this.modalService = modalService;\n        this.router = router;\n        this.searchHistoryService = searchHistoryService;\n        this.jhiAlertService = jhiAlertService;\n        // Employee List\n        this.show = false;\n        this.status = null;\n        this.type = null;\n        this.flag = true;\n        this.experience = null;\n        this.location = null;\n        this.domain = null;\n        this.expStart = 0;\n        this.expEnd = 100;\n        this.skills = null;\n        this.endClient = null;\n        this.fullName = null;\n        this.errorMessage = false;\n        this.searchResult = false;\n        this.displayedColumns = [\n            'employee.id',\n            'employee.fullName',\n            'employee.empType',\n            // 'title',\n            // 'location',\n            // 'totalExperience',\n            // 'employee.status',\n            'endClient',\n            // 'specificSkills',\n            // 'clientDomain',\n            'layerOne',\n            'layerTwo',\n            'srsJoiningDate',\n            'currentProjectStartDate',\n            'action'\n        ];\n    }\n    ngOnInit() {\n        this.loginService.searchTypeReqData.subscribe(res => {\n            this.type = res;\n        });\n        this.loginService.searchStatusReqData.subscribe(res => {\n            this.status = res;\n            this.flag = false;\n        });\n        if (this.type !== undefined && this.type !== null && this.status !== undefined && this.status !== null) {\n            this.sendResult();\n        }\n        else {\n            this.storeType('all');\n        }\n        this.professionalService.dropDown().subscribe(res => {\n            this.dropDown = res;\n            this.domainList = this.dropDown.domainList;\n            this.locationList = this.dropDown.location;\n            this.statusList = this.dropDown.status;\n            this.endClientList = this.dropDown.endClient;\n        });\n        this.getTableData();\n        this.getSavedSearch();\n    }\n    // Storing Employee Domain\n    storeDomain(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n        }\n        this.domain = value;\n    }\n    // Storing Employee Location\n    storeLocation(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n        }\n        this.location = value;\n    }\n    // Storing Employee Status\n    storeStatus(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n        }\n        this.status = value;\n    }\n    // Storing Employee Experience\n    storeExp(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n            this.expStart = 0;\n            this.expEnd = 100;\n        }\n        else if (value === '>15') {\n            this.expStart = 15;\n            this.expEnd = 100;\n        }\n        else if (value !== app_constants_1.BLANK) {\n            this.experience = value;\n            // tslint:disable-next-line:prefer-const\n            let toArray = this.experience.split('-');\n            // tslint:disable-next-line:radix\n            this.expStart = parseInt(toArray[0]);\n            // tslint:disable-next-line:radix\n            this.expEnd = parseInt(toArray[1]);\n        }\n    }\n    // Storing Employee Type\n    storeType(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n            this.flag = true;\n        }\n        if (value === 'all') {\n            value = null;\n            this.flag = true;\n        }\n        this.type = value;\n    }\n    // Storing Employee Client\n    storeClient(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n        }\n        this.endClient = value;\n    }\n    // Storing Employee Skills\n    storeSkills(value) {\n        if (value === app_constants_1.BLANK) {\n            value = null;\n        }\n        this.skills = value;\n    }\n    // Send result with search data\n    sendResult() {\n        if (this.type === app_constants_1.BLANK) {\n            this.type = null;\n        }\n        if (this.status === app_constants_1.BLANK) {\n            this.status = null;\n        }\n        this.result = {\n            type: this.type,\n            location: this.location,\n            domain: this.domain,\n            // tslint:disable-next-line:radix\n            expStart: this.expStart,\n            // tslint:disable-next-line:radix\n            expEnd: this.expEnd,\n            status: this.status,\n            skills: this.skills,\n            endClient: this.endClient,\n            fullName: this.fullName\n        };\n        this.getTableData();\n    }\n    // Get searching data in table\n    getTableData() {\n        this.professionalService.getEmployee(this.result).subscribe(res => {\n            this.collection = res;\n            console.log('res............', res);\n            if (this.collection.length === 0) {\n                this.errorMessage = true;\n            }\n            else {\n                this.errorMessage = false;\n                // this.professional = this.collection;\n                this.dataSource = new material_1.MatTableDataSource(this.collection);\n                setTimeout(() => this.dataSource.paginator = this.paginator);\n                this.dataSource.sortingDataAccessor = (item, property) => {\n                    if (property.includes('.')) {\n                        return property.split('.').reduce((o, i) => o[i], item);\n                    }\n                    return item[property];\n                };\n                setTimeout(() => this.dataSource.sort = this.sort);\n                if (this.dataSource.data) {\n                    this.searchResult = true;\n                }\n                if (this.collection.length === 0) {\n                    this.errorMessage = true;\n                }\n                else if (this.collection.length !== 0) {\n                    this.errorMessage = false;\n                    if (this.dataSource.paginator === undefined) {\n                        this.dataSource.paginator = this.paginator;\n                    }\n                    if (this.dataSource.sort === undefined) {\n                        this.dataSource.sort = this.sort;\n                    }\n                    if (this.paginator && this.sort) {\n                        this.applyFilter(app_constants_1.BLANK);\n                    }\n                }\n                // tslint:disable-next-line: no-shadowed-variable\n                this.dataSource.filterPredicate = (data, filter) => {\n                    const dataStr = data.employee.id +\n                        data.employee.fullName +\n                        data.employee.empType +\n                        // data.jobTitle +\n                        // data.location +\n                        // data.totalExperience +\n                        // data.employee.status +\n                        // data.endClient +\n                        // data.generalSkills +\n                        data.layerOne +\n                        data.layerTwo +\n                        data.srsJoiningDate +\n                        data.currentProjectStartDate +\n                        data.clientDomain;\n                    const tableData = dataStr.trim().toLowerCase();\n                    return tableData.indexOf(filter) !== -1;\n                };\n            }\n        });\n    }\n    // Resetting Employee Skill\n    resetSkillsValue() {\n        this.skills = '';\n        this.sendResult();\n    }\n    // Resetting Employee Name\n    resetEmpNameValue() {\n        this.fullName = '';\n        this.sendResult();\n    }\n    // Filtering the employee list in the table\n    applyFilter(filterValue) {\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n    // Modal for the row\n    selectRow(templateRef, row) {\n        this.rowID = row['id'];\n        this.dialogRef = this.modalService.open(templateRef);\n    }\n    close() {\n        this.dialogRef.close();\n    }\n    // Modal for Download Excel file\n    exportExcel(excelColums) {\n        this.column = new column_model_1.Column();\n        this.selectAllOrNot(true);\n        this.dialogRef = this.modalService.open(excelColums);\n    }\n    // Download Excel in the modal\n    downloadExcel() {\n        this.professionalService.exportasExcel(this.result, this.column).subscribe(blob => {\n            file_saver_1.saveAs(blob, 'EmployeeSearchResults.xlsx');\n        });\n        this.close();\n        this.router.navigate([app_constants_1.SLACE, app_constants_1.SEARCH_CRITERIA_URL]);\n    }\n    // Export excel file from email\n    exportMail(excelMailColums) {\n        this.column = new column_model_1.Column();\n        this.selectAllOrNot(true);\n        this.dialogRef = this.modalService.open(excelMailColums);\n    }\n    // Select the fields in the download modal\n    selectAllOrNot(isSelect) {\n        this.column.id = this.column.empType = this.column.totalExperience = this.column.specificSkills = this.column.generalSkills = this.column.fullName = this.column.email = this.column.contactNo = this.column.status = this.column.mode = isSelect;\n        this.column.location = this.column.jobTitle = this.column.typeOfRole = this.column.clientDomain = this.column.mode = this.column.employer = this.column.srsEmpId = this.column.primeVendor = this.column.endClient = this.column.currentProjectEndDate = this.column.currentProjectStartDate = this.column.firstName = this.column.lastName = this.column.education = this.column.certification = this.column.remarks = this.column.skillCategory = isSelect;\n        this.column.homePhone = this.column.workPhoneNumber = this.column.mobileNumber = this.column.dob = this.column.addedOn = this.column.addtionalNotifiers = this.column.jobTitle = this.column.source = this.column.primarySkills = this.column.benchAge = this.column.technology = this.column.layerOne = this.column.layerTwo = this.column.srsJoiningDate = this.column.workExperience = isSelect;\n    }\n    // export excel from mail in the modal\n    exportExcelMail() {\n        this.professionalService.exportMail(this.result, this.column); // .subscribe();\n        this.close();\n        this.router.navigate([app_constants_1.SLACE, app_constants_1.SEARCH_CRITERIA_URL]);\n    }\n    // Resetting selecting values\n    reset() {\n        this.storeType(null);\n        this.storeClient(null);\n        this.storeLocation(null);\n        this.storeSkills(null);\n        this.storeStatus(null);\n        this.storeExp(app_constants_1.BLANK);\n        this.storeDomain(null);\n        this.sendResult();\n    }\n    // showing saved search popup\n    shows() {\n        if (this.show) {\n            this.show = false;\n        }\n        else {\n            this.show = true;\n        }\n        this.getSavedSearch();\n    }\n    getSavedSearch() {\n        this.searchHistoryService\n            .query()\n            .pipe(operators_1.filter((res) => res.ok), operators_1.map((res) => res.body))\n            .subscribe((res) => {\n            this.searchHistories = res;\n        }, (res) => this.onError(res.message));\n    }\n    onError(errorMessage) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    }\n    // showing column popup\n    nameSearch(index) {\n        this.storeType(index.empType);\n        this.storeClient(index.endClient);\n        this.storeLocation(index.location);\n        this.storeSkills(index.skills);\n        this.storeStatus(index.status);\n        this.expStart = index.fromExperience;\n        this.expEnd = index.toExperience;\n        this.storeDomain(index.domain);\n        this.sendResult();\n        this.show = false;\n    }\n    // Next pagination\n    getNext(event) {\n        const offset = event.pageSize * event.pageIndex;\n    }\n    // Saving Search\n    saveSearchForFuture(searchNameSavePopUp) {\n        this.searchHistory = new search_history_model_1.SearchHistory();\n        this.dialogRef = this.modalService.open(searchNameSavePopUp);\n    }\n    // Saving Search Names using Modal\n    saveSearchHistory() {\n        if (this.type === app_constants_1.BLANK) {\n            this.type = null;\n        }\n        if (this.status === app_constants_1.BLANK) {\n            this.status = null;\n        }\n        this.searchHistory.empType = this.type;\n        this.searchHistory.location = this.location;\n        this.searchHistory.domain = this.domain;\n        this.searchHistory.fromExperience = this.expStart;\n        this.searchHistory.toExperience = this.expEnd;\n        this.searchHistory.searchName = this.searchHistoryName;\n        this.searchHistory.status = this.status;\n        this.searchHistory.skills = this.skills;\n        this.searchHistory.endClient = this.endClient;\n        this.searchHistory.employeeName = this.fullName;\n        this.searchHistoryService.create(this.searchHistory).subscribe(data => {\n            // alert('Search saved ...!');\n            sweetalert2_1.default.fire(app_constants_1.BLANK, app_constants_1.SEARCH_SUCCESS_MSG, app_constants_1.SUCCESS);\n            this.close();\n        }, err => {\n            if (err.status === 409) {\n                sweetalert2_1.default.fire('Ohoo..', app_constants_1.SEARCH_INFO_MSG, app_constants_1.INFO);\n                // alert('Search Name already used... please use other name');\n            }\n            else {\n                // alert('Somthing went wrong...!');\n                sweetalert2_1.default.fire('Oops..', app_constants_1.SEARCH_ERROR_MSG, app_constants_1.ERROR);\n            }\n        });\n    }\n};\ntslib_1.__decorate([\n    core_1.ViewChild(material_1.MatPaginator, { static: true }),\n    tslib_1.__metadata(\"design:type\", typeof (_a = typeof material_1.MatPaginator !== \"undefined\" && material_1.MatPaginator) === \"function\" ? _a : Object)\n], SearchCriteriaComponent.prototype, \"paginator\", void 0);\ntslib_1.__decorate([\n    core_1.ViewChild(material_1.MatSort, { static: true }),\n    tslib_1.__metadata(\"design:type\", typeof (_b = typeof material_1.MatSort !== \"undefined\" && material_1.MatSort) === \"function\" ? _b : Object)\n], SearchCriteriaComponent.prototype, \"sort\", void 0);\nSearchCriteriaComponent = tslib_1.__decorate([\n    core_1.Component({\n        selector: 'jhi-search-criteria',\n        templateUrl: './search-criteria.component.html',\n        styleUrls: ['./search-criteria.component.scss']\n    }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_c = typeof core_2.LoginService !== \"undefined\" && core_2.LoginService) === \"function\" ? _c : Object, typeof (_d = typeof professional_service_1.ProfessionalService !== \"undefined\" && professional_service_1.ProfessionalService) === \"function\" ? _d : Object, typeof (_e = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" ? _e : Object, typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _f : Object, typeof (_g = typeof search_history_service_1.SearchHistoryService !== \"undefined\" && search_history_service_1.SearchHistoryService) === \"function\" ? _g : Object, typeof (_h = typeof ng_jhipster_1.JhiAlertService !== \"undefined\" && ng_jhipster_1.JhiAlertService) === \"function\" ? _h : Object])\n], SearchCriteriaComponent);\nexports.SearchCriteriaComponent = SearchCriteriaComponent;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/search/search-criteria/search-criteria.component.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/search/search-criteria/search-criteria.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {Component, OnInit, ViewChild} from '@angular/core';\nimport {HttpErrorResponse, HttpResponse} from '@angular/common/http';\nimport {Router} from '@angular/router';\nimport {NgbModal} from '@ng-bootstrap/ng-bootstrap';\nimport {saveAs as importedSaveAs} from 'file-saver';\nimport {MatPaginator, MatSort, MatTableDataSource, PageEvent} from '@angular/material';\nimport {Column, IColumn} from 'app/shared/model/column.model';\nimport {LoginService} from 'app/core';\nimport {IProfessional} from 'app/shared/model/professional.model';\nimport {ProfessionalService} from 'app/entities/professional/professional.service';\nimport {ISearchHistory, SearchHistory} from 'app/shared/model/search-history.model';\nimport {SearchHistoryService} from 'app/entities/search-history/search-history.service';\nimport {filter, map} from 'rxjs/operators';\nimport {JhiAlertService} from 'ng-jhipster';\nimport Swal from 'sweetalert2';\nimport {\n    SEARCH_ERROR_MSG,\n    SEARCH_INFO_MSG,\n    SEARCH_SUCCESS_MSG,\n    SEARCH_CRITERIA_URL,\n    SLACE, BLANK, INFO, ERROR, SUCCESS\n} from 'app/app.constants';\nimport {IConfigure} from 'app/shared/model/configure.model';\n\n@Component({\n    selector: 'jhi-search-criteria',\n    templateUrl: './search-criteria.component.html',\n    styleUrls: ['./search-criteria.component.scss']\n})\nexport class SearchCriteriaComponent implements OnInit {\n    // Employee List\n    show: any = false;\n    public status: any = null;\n    public type: any = null;\n    flag = true;\n    professional: IProfessional;\n    dropDown: any;\n    domainList: IConfigure[];\n    locationList: IConfigure[];\n    statusList: IConfigure[];\n    endClientList: IConfigure[];\n    result: any;\n    experience: string = null;\n    location: any = null;\n    domain: any = null;\n    expStart = 0;\n    expEnd = 100;\n    skills: string = null;\n    endClient: any = null;\n    fullName: string = null;\n    collection: any;\n\n    errorMessage = false;\n    searchResult = false;\n    dataSource: MatTableDataSource<IProfessional>;\n    selectedRow: any;\n    totalCount: any;\n    modalRef: any;\n    dialogRef: any;\n    PageEvent: any;\n    displayedColumns = [\n        'employee.id',\n        'employee.fullName',\n        'employee.empType',\n        // 'title',\n        // 'location',\n        // 'totalExperience',\n        // 'employee.status',\n        'endClient',\n        // 'specificSkills',\n        // 'clientDomain',\n        'layerOne',\n        'layerTwo',\n        'srsJoiningDate',\n        'currentProjectStartDate',\n        'action'\n    ];\n    column: IColumn;\n    header: any;\n    users: any;\n    public rowID;\n\n    @ViewChild(MatPaginator, {static: true}) paginator: MatPaginator;\n    @ViewChild(MatSort, {static: true}) sort: MatSort;\n    searchHistory: any;\n    searchHistoryName: any;\n    searchHistories: ISearchHistory[];\n\n    constructor(\n        private loginService: LoginService,\n        private professionalService: ProfessionalService,\n        public modalService: NgbModal,\n        public router: Router,\n        protected searchHistoryService: SearchHistoryService,\n        protected jhiAlertService: JhiAlertService\n    ) {\n    }\n\n    ngOnInit() {\n        this.loginService.searchTypeReqData.subscribe(res => {\n            this.type = res;\n        });\n\n        this.loginService.searchStatusReqData.subscribe(res => {\n            this.status = res;\n            this.flag = false;\n        });\n\n        if (this.type !== undefined && this.type !== null && this.status !== undefined && this.status !== null) {\n            this.sendResult();\n        } else {\n            this.storeType('all');\n        }\n        this.professionalService.dropDown().subscribe(res => {\n            this.dropDown = res;\n            this.domainList = this.dropDown.domainList;\n            this.locationList = this.dropDown.location;\n            this.statusList = this.dropDown.status;\n            this.endClientList = this.dropDown.endClient;\n        });\n        this.getTableData();\n        this.getSavedSearch();\n    }\n\n    // Storing Employee Domain\n    storeDomain(value) {\n        if (value === BLANK) {\n            value = null;\n        }\n        this.domain = value;\n    }\n\n    // Storing Employee Location\n    storeLocation(value) {\n        if (value === BLANK) {\n            value = null;\n        }\n        this.location = value;\n    }\n\n    // Storing Employee Status\n    storeStatus(value) {\n        if (value === BLANK) {\n            value = null;\n        }\n        this.status = value;\n    }\n\n    // Storing Employee Experience\n    storeExp(value) {\n        if (value === BLANK) {\n            value = null;\n            this.expStart = 0;\n            this.expEnd = 100;\n        } else if (value === '>15') {\n            this.expStart = 15;\n            this.expEnd = 100;\n        } else if (value !== BLANK) {\n            this.experience = value;\n            // tslint:disable-next-line:prefer-const\n            let toArray = this.experience.split('-');\n            // tslint:disable-next-line:radix\n            this.expStart = parseInt(toArray[0]);\n            // tslint:disable-next-line:radix\n            this.expEnd = parseInt(toArray[1]);\n        }\n    }\n\n    // Storing Employee Type\n    storeType(value) {\n        if (value === BLANK) {\n            value = null;\n            this.flag = true;\n        }\n        if (value === 'all') {\n            value = null;\n            this.flag = true;\n        }\n        this.type = value;\n    }\n\n    // Storing Employee Client\n    storeClient(value) {\n        if (value === BLANK) {\n            value = null;\n        }\n        this.endClient = value;\n    }\n\n    // Storing Employee Skills\n    storeSkills(value) {\n        if (value === BLANK) {\n            value = null;\n        }\n        this.skills = value;\n    }\n\n    // Send result with search data\n    public sendResult() {\n        if (this.type === BLANK) {\n            this.type = null;\n        }\n        if (this.status === BLANK) {\n            this.status = null;\n        }\n        this.result = {\n            type: this.type,\n            location: this.location,\n            domain: this.domain,\n            // tslint:disable-next-line:radix\n            expStart: this.expStart,\n            // tslint:disable-next-line:radix\n            expEnd: this.expEnd,\n            status: this.status,\n            skills: this.skills,\n            endClient: this.endClient,\n            fullName: this.fullName\n        };\n        this.getTableData();\n    }\n\n    // Get searching data in table\n    getTableData() {\n        this.professionalService.getEmployee(this.result).subscribe(res => {\n            this.collection = res;\n            console.log('res............', res);\n            if (this.collection.length === 0) {\n                this.errorMessage = true;\n            } else {\n                this.errorMessage = false;\n                    // this.professional = this.collection;\n                this.dataSource = new MatTableDataSource(this.collection);\n                setTimeout(() => this.dataSource.paginator = this.paginator);\n                this.dataSource.sortingDataAccessor = (item, property) => {\n                    if (property.includes('.')) {\n                        return property.split('.').reduce((o, i) => o[i], item);\n                    }\n                    return item[property];\n                };\n                setTimeout(() => this.dataSource.sort = this.sort);\n                if (this.dataSource.data) {\n                    this.searchResult = true;\n                }\n                if (this.collection.length === 0) {\n                    this.errorMessage = true;\n                } else if (this.collection.length !== 0) {\n                    this.errorMessage = false;\n                    if (this.dataSource.paginator === undefined) {\n                        this.dataSource.paginator = this.paginator;\n                    }\n                    if (this.dataSource.sort === undefined) {\n                        this.dataSource.sort = this.sort;\n                    }\n                    if (this.paginator && this.sort) {\n                        this.applyFilter(BLANK);\n                    }\n                }\n        // tslint:disable-next-line: no-shadowed-variable\n                this.dataSource.filterPredicate = (data, filter) => {\n                    const dataStr =\n                                    data.employee.id +\n                                    data.employee.fullName +\n                                    data.employee.empType +\n                                    // data.jobTitle +\n                                    // data.location +\n                                    // data.totalExperience +\n                                    // data.employee.status +\n                                    // data.endClient +\n                                    // data.generalSkills +\n                                    data.layerOne +\n                                    data.layerTwo +\n                                    data.srsJoiningDate +\n                                    data.currentProjectStartDate +\n                                    data.clientDomain;\n                    const tableData = dataStr.trim().toLowerCase();\n                    return tableData.indexOf(filter) !== -1;\n                };\n            }\n        });\n    }\n\n    // Resetting Employee Skill\n    resetSkillsValue() {\n        this.skills = '';\n        this.sendResult();\n    }\n\n    // Resetting Employee Name\n    resetEmpNameValue() {\n        this.fullName = '';\n        this.sendResult();\n    }\n\n    // Filtering the employee list in the table\n    applyFilter(filterValue: string) {\n        this.dataSource.filter = filterValue.trim().toLowerCase();\n\n        if (this.dataSource.paginator) {\n            this.dataSource.paginator.firstPage();\n        }\n    }\n\n    // Modal for the row\n    selectRow(templateRef, row) {\n        this.rowID = row['id'];\n        this.dialogRef = this.modalService.open(templateRef);\n    }\n\n    close() {\n        this.dialogRef.close();\n    }\n\n    // Modal for Download Excel file\n    exportExcel(excelColums) {\n        this.column = new Column();\n        this.selectAllOrNot(true);\n\n        this.dialogRef = this.modalService.open(excelColums);\n    }\n\n    // Download Excel in the modal\n    downloadExcel() {\n        this.professionalService.exportasExcel(this.result, this.column).subscribe(blob => {\n            importedSaveAs(blob, 'EmployeeSearchResults.xlsx');\n        });\n        this.close();\n        this.router.navigate([SLACE, SEARCH_CRITERIA_URL]);\n    }\n\n    // Export excel file from email\n    exportMail(excelMailColums) {\n        this.column = new Column();\n        this.selectAllOrNot(true);\n        this.dialogRef = this.modalService.open(excelMailColums);\n    }\n\n    // Select the fields in the download modal\n    selectAllOrNot(isSelect: boolean) {\n        this.column.id = this.column.empType = this.column.totalExperience = this.column.specificSkills = this.column.generalSkills = this.column.fullName = this.column.email = this.column.contactNo = this.column.status = this.column.mode = isSelect;\n        this.column.location = this.column.jobTitle = this.column.typeOfRole = this.column.clientDomain = this.column.mode = this.column.employer = this.column.srsEmpId = this.column.primeVendor = this.column.endClient = this.column.currentProjectEndDate = this.column.currentProjectStartDate = this.column.firstName = this.column.lastName = this.column.education = this.column.certification = this.column.remarks = this.column.skillCategory = isSelect;\n        this.column.homePhone = this.column.workPhoneNumber = this.column.mobileNumber = this.column.dob = this.column.addedOn = this.column.addtionalNotifiers = this.column.jobTitle = this.column.source = this.column.primarySkills = this.column.benchAge = this.column.technology = this.column.layerOne = this.column.layerTwo = this.column.srsJoiningDate = this.column.workExperience = isSelect;\n    }\n\n    // export excel from mail in the modal\n    exportExcelMail() {\n        this.professionalService.exportMail(this.result, this.column); // .subscribe();\n        this.close();\n        this.router.navigate([SLACE, SEARCH_CRITERIA_URL]);\n    }\n\n    // Resetting selecting values\n    reset() {\n        this.storeType(null);\n        this.storeClient(null);\n        this.storeLocation(null);\n        this.storeSkills(null);\n        this.storeStatus(null);\n        this.storeExp(BLANK);\n        this.storeDomain(null);\n        this.sendResult();\n    }\n\n    // showing saved search popup\n    shows() {\n        if (this.show) {\n            this.show = false;\n        } else {\n            this.show = true;\n        }\n        this.getSavedSearch();\n    }\n\n    getSavedSearch() {\n        this.searchHistoryService\n            .query()\n            .pipe(\n                filter((res: HttpResponse<ISearchHistory[]>) => res.ok),\n                map((res: HttpResponse<ISearchHistory[]>) => res.body)\n            )\n            .subscribe(\n                (res: ISearchHistory[]) => {\n                    this.searchHistories = res;\n                },\n                (res: HttpErrorResponse) => this.onError(res.message)\n            );\n    }\n\n    protected onError(errorMessage: string) {\n        this.jhiAlertService.error(errorMessage, null, null);\n    }\n\n    // showing column popup\n    nameSearch(index) {\n        this.storeType(index.empType);\n        this.storeClient(index.endClient);\n        this.storeLocation(index.location);\n        this.storeSkills(index.skills);\n        this.storeStatus(index.status);\n        this.expStart = index.fromExperience;\n        this.expEnd = index.toExperience;\n        this.storeDomain(index.domain);\n        this.sendResult();\n        this.show = false;\n    }\n\n    // Next pagination\n    getNext(event: PageEvent) {\n        const offset = event.pageSize * event.pageIndex;\n    }\n\n    // Saving Search\n    saveSearchForFuture(searchNameSavePopUp) {\n        this.searchHistory = new SearchHistory();\n        this.dialogRef = this.modalService.open(searchNameSavePopUp);\n    }\n\n    // Saving Search Names using Modal\n    saveSearchHistory() {\n        if (this.type === BLANK) {\n            this.type = null;\n        }\n        if (this.status === BLANK) {\n            this.status = null;\n        }\n        this.searchHistory.empType = this.type;\n        this.searchHistory.location = this.location;\n        this.searchHistory.domain = this.domain;\n        this.searchHistory.fromExperience = this.expStart;\n        this.searchHistory.toExperience = this.expEnd;\n        this.searchHistory.searchName = this.searchHistoryName;\n        this.searchHistory.status = this.status;\n        this.searchHistory.skills = this.skills;\n        this.searchHistory.endClient = this.endClient;\n        this.searchHistory.employeeName = this.fullName;\n        this.searchHistoryService.create(this.searchHistory).subscribe(\n            data => {\n                // alert('Search saved ...!');\n                Swal.fire(BLANK, SEARCH_SUCCESS_MSG, SUCCESS);\n                this.close();\n            },\n            err => {\n                if (err.status === 409) {\n                    Swal.fire('Ohoo..', SEARCH_INFO_MSG, INFO);\n                    // alert('Search Name already used... please use other name');\n                } else {\n                    // alert('Somthing went wrong...!');\n                    Swal.fire('Oops..', SEARCH_ERROR_MSG, ERROR);\n                }\n            }\n        );\n    }\n\n}\n"]}]}