{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/auth-jwt.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/core/auth/auth-jwt.service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet AuthServerProvider = class AuthServerProvider {\n    constructor(http, $localStorage, $sessionStorage) {\n        this.http = http;\n        this.$localStorage = $localStorage;\n        this.$sessionStorage = $sessionStorage;\n    }\n    getToken() {\n        return this.$localStorage.retrieve(app_constants_1.AUTHENTICATION_TOKEN) || this.$sessionStorage.retrieve(app_constants_1.AUTHENTICATION_TOKEN);\n    }\n    login(credentials) {\n        const data = {\n            username: credentials.username,\n            password: credentials.password,\n            rememberMe: credentials.rememberMe\n        };\n        return this.http.post(app_constants_1.SERVER_API_URL + app_constants_1.API_AUTHENTICATE, data, { observe: app_constants_1.RESPONSE }).pipe(operators_1.map(authenticateSuccess.bind(this)));\n        function authenticateSuccess(resp) {\n            const bearerToken = resp.headers.get(app_constants_1.AUTHORIZATION);\n            if (bearerToken && bearerToken.slice(0, 7) === app_constants_1.BEARER) {\n                const jwt = bearerToken.slice(7, bearerToken.length);\n                this.storeAuthenticationToken(jwt, credentials.rememberMe);\n                return jwt;\n            }\n        }\n    }\n    loginWithToken(jwt, rememberMe) {\n        if (jwt) {\n            this.storeAuthenticationToken(jwt, rememberMe);\n            return Promise.resolve(jwt);\n        }\n        else {\n            return Promise.reject(app_constants_1.AUTH_JWT_SERVICE_PROMISE_REJECT); // Put appropriate error message here\n        }\n    }\n    storeAuthenticationToken(jwt, rememberMe) {\n        if (rememberMe) {\n            this.$localStorage.store(app_constants_1.AUTHENTICATION_TOKEN, jwt);\n        }\n        else {\n            this.$sessionStorage.store(app_constants_1.AUTHENTICATION_TOKEN, jwt);\n        }\n    }\n    logout() {\n        return new rxjs_1.Observable(observer => {\n            this.$localStorage.clear(app_constants_1.AUTHENTICATION_TOKEN);\n            this.$sessionStorage.clear(app_constants_1.AUTHENTICATION_TOKEN);\n            observer.complete();\n        });\n    }\n};\nAuthServerProvider = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.LocalStorageService !== \"undefined\" && ngx_webstorage_1.LocalStorageService) === \"function\" ? _b : Object, typeof (_c = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _c : Object])\n], AuthServerProvider);\nexports.AuthServerProvider = AuthServerProvider;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/core/auth/auth-jwt.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/auth-jwt.service.ts"],"names":[],"mappings":";;;;AAAA,wCAA2C;AAC3C,+CAAkD;AAClD,+BAAkC;AAClC,8CAAqC;AACrC,mDAA4E;AAE5E,qDAA6J;AAG7J,IAAa,kBAAkB,GAA/B,MAAa,kBAAkB;IAC7B,YAAoB,IAAgB,EAAU,aAAkC,EAAU,eAAsC;QAA5G,SAAI,GAAJ,IAAI,CAAY;QAAU,kBAAa,GAAb,aAAa,CAAqB;QAAU,oBAAe,GAAf,eAAe,CAAuB;IAAG,CAAC;IAEpI,QAAQ;QACN,OAAO,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,oCAAoB,CAAC,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,oCAAoB,CAAC,CAAC;IAClH,CAAC;IAED,KAAK,CAAC,WAAW;QACf,MAAM,IAAI,GAAG;YACX,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,QAAQ,EAAE,WAAW,CAAC,QAAQ;YAC9B,UAAU,EAAE,WAAW,CAAC,UAAU;SACnC,CAAC;QACF,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,8BAAc,GAAG,gCAAgB,EAAE,IAAI,EAAE,EAAE,OAAO,EAAE,wBAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,eAAG,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QAEhI,SAAS,mBAAmB,CAAC,IAAI;YAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,6BAAa,CAAC,CAAC;YACpD,IAAI,WAAW,IAAI,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,sBAAM,EAAE;gBACrD,MAAM,GAAG,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,WAAW,CAAC,MAAM,CAAC,CAAC;gBACrD,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,WAAW,CAAC,UAAU,CAAC,CAAC;gBAC3D,OAAO,GAAG,CAAC;aACZ;QACH,CAAC;IACH,CAAC;IAED,cAAc,CAAC,GAAG,EAAE,UAAU;QAC5B,IAAI,GAAG,EAAE;YACP,IAAI,CAAC,wBAAwB,CAAC,GAAG,EAAE,UAAU,CAAC,CAAC;YAC/C,OAAO,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;SAC7B;aAAM;YACL,OAAO,OAAO,CAAC,MAAM,CAAC,+CAA+B,CAAC,CAAC,CAAC,qCAAqC;SAC9F;IACH,CAAC;IAED,wBAAwB,CAAC,GAAG,EAAE,UAAU;QACtC,IAAI,UAAU,EAAE;YACd,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,oCAAoB,EAAE,GAAG,CAAC,CAAC;SACrD;aAAM;YACL,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,oCAAoB,EAAE,GAAG,CAAC,CAAC;SACvD;IACH,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,iBAAU,CAAC,QAAQ,CAAC,EAAE;YAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,oCAAoB,CAAC,CAAC;YAC/C,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,oCAAoB,CAAC,CAAC;YACjD,QAAQ,CAAC,QAAQ,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAA;AAjDY,kBAAkB;IAD9B,iBAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAEP,iBAAU,oBAAV,iBAAU,oDAAyB,oCAAmB,oBAAnB,oCAAmB,oDAA2B,sCAAqB,oBAArB,sCAAqB;GADrH,kBAAkB,CAiD9B;AAjDY,gDAAkB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\n\nimport { SERVER_API_URL, AUTHENTICATION_TOKEN, API_AUTHENTICATE, RESPONSE, AUTHORIZATION, BEARER, AUTH_JWT_SERVICE_PROMISE_REJECT } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class AuthServerProvider {\n  constructor(private http: HttpClient, private $localStorage: LocalStorageService, private $sessionStorage: SessionStorageService) {}\n\n  getToken() {\n    return this.$localStorage.retrieve(AUTHENTICATION_TOKEN) || this.$sessionStorage.retrieve(AUTHENTICATION_TOKEN);\n  }\n\n  login(credentials): Observable<any> {\n    const data = {\n      username: credentials.username,\n      password: credentials.password,\n      rememberMe: credentials.rememberMe\n    };\n    return this.http.post(SERVER_API_URL + API_AUTHENTICATE, data, { observe: RESPONSE }).pipe(map(authenticateSuccess.bind(this)));\n\n    function authenticateSuccess(resp) {\n      const bearerToken = resp.headers.get(AUTHORIZATION);\n      if (bearerToken && bearerToken.slice(0, 7) === BEARER) {\n        const jwt = bearerToken.slice(7, bearerToken.length);\n        this.storeAuthenticationToken(jwt, credentials.rememberMe);\n        return jwt;\n      }\n    }\n  }\n\n  loginWithToken(jwt, rememberMe) {\n    if (jwt) {\n      this.storeAuthenticationToken(jwt, rememberMe);\n      return Promise.resolve(jwt);\n    } else {\n      return Promise.reject(AUTH_JWT_SERVICE_PROMISE_REJECT); // Put appropriate error message here\n    }\n  }\n\n  storeAuthenticationToken(jwt, rememberMe) {\n    if (rememberMe) {\n      this.$localStorage.store(AUTHENTICATION_TOKEN, jwt);\n    } else {\n      this.$sessionStorage.store(AUTHENTICATION_TOKEN, jwt);\n    }\n  }\n\n  logout(): Observable<any> {\n    return new Observable(observer => {\n      this.$localStorage.clear(AUTHENTICATION_TOKEN);\n      this.$sessionStorage.clear(AUTHENTICATION_TOKEN);\n      observer.complete();\n    });\n  }\n}\n"]}]}