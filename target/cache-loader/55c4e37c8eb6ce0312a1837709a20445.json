{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/account.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/core/auth/account.service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst rxjs_1 = require(\"rxjs\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet AccountService = class AccountService {\n    constructor(http) {\n        this.http = http;\n        this.authenticated = false;\n        this.authenticationState = new rxjs_1.Subject();\n    }\n    fetch() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_ACCOUNT, { observe: app_constants_1.RESPONSE });\n    }\n    save(account) {\n        return this.http.post(app_constants_1.SERVER_API_URL + app_constants_1.API_ACCOUNT, account, { observe: app_constants_1.RESPONSE });\n    }\n    authenticate(identity) {\n        this.userIdentity = identity;\n        this.authenticated = identity !== null;\n        this.authenticationState.next(this.userIdentity);\n    }\n    hasAnyAuthority(authorities) {\n        if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n            return false;\n        }\n        for (let i = 0; i < authorities.length; i++) {\n            if (this.userIdentity.authorities.includes(authorities[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    hasAuthority(authority) {\n        if (!this.authenticated) {\n            return Promise.resolve(false);\n        }\n        return this.identity().then(id => {\n            return Promise.resolve(id.authorities && id.authorities.includes(authority));\n        }, () => {\n            return Promise.resolve(false);\n        });\n    }\n    identity(force) {\n        if (force) {\n            this.userIdentity = undefined;\n        }\n        // check and see if we have retrieved the userIdentity data from the server.\n        // if we have, reuse it by immediately resolving\n        if (this.userIdentity) {\n            return Promise.resolve(this.userIdentity);\n        }\n        // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n        return this.fetch()\n            .toPromise()\n            .then(response => {\n            const account = response.body;\n            if (account) {\n                this.userIdentity = account;\n                this.authenticated = true;\n            }\n            else {\n                this.userIdentity = null;\n                this.authenticated = false;\n            }\n            this.authenticationState.next(this.userIdentity);\n            return this.userIdentity;\n        })\n            .catch(err => {\n            this.userIdentity = null;\n            this.authenticated = false;\n            this.authenticationState.next(this.userIdentity);\n            return null;\n        });\n    }\n    isAuthenticated() {\n        return this.authenticated;\n    }\n    isIdentityResolved() {\n        return this.userIdentity !== undefined;\n    }\n    getAuthenticationState() {\n        return this.authenticationState.asObservable();\n    }\n    getImageUrl() {\n        return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n    }\n};\nAccountService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], AccountService);\nexports.AccountService = AccountService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/core/auth/account.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/auth/account.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\n\nimport { SERVER_API_URL, API_ACCOUNT, RESPONSE } from 'app/app.constants';\nimport { Account } from 'app/core/user/account.model';\n\n@Injectable({ providedIn: 'root' })\nexport class AccountService {\n  private userIdentity: any;\n  private authenticated = false;\n  private authenticationState = new Subject<any>();\n\n  constructor(private http: HttpClient) {}\n\n  fetch(): Observable<HttpResponse<Account>> {\n    return this.http.get<Account>(SERVER_API_URL + API_ACCOUNT, { observe: RESPONSE });\n  }\n\n  save(account: any): Observable<HttpResponse<any>> {\n    return this.http.post(SERVER_API_URL + API_ACCOUNT, account, { observe: RESPONSE });\n  }\n\n  authenticate(identity) {\n    this.userIdentity = identity;\n    this.authenticated = identity !== null;\n    this.authenticationState.next(this.userIdentity);\n  }\n\n  hasAnyAuthority(authorities: string[]): boolean {\n    if (!this.authenticated || !this.userIdentity || !this.userIdentity.authorities) {\n      return false;\n    }\n\n    for (let i = 0; i < authorities.length; i++) {\n      if (this.userIdentity.authorities.includes(authorities[i])) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasAuthority(authority: string): Promise<boolean> {\n    if (!this.authenticated) {\n      return Promise.resolve(false);\n    }\n\n    return this.identity().then(\n      id => {\n        return Promise.resolve(id.authorities && id.authorities.includes(authority));\n      },\n      () => {\n        return Promise.resolve(false);\n      }\n    );\n  }\n\n  identity(force?: boolean): Promise<Account> {\n    if (force) {\n      this.userIdentity = undefined;\n    }\n\n    // check and see if we have retrieved the userIdentity data from the server.\n    // if we have, reuse it by immediately resolving\n    if (this.userIdentity) {\n      return Promise.resolve(this.userIdentity);\n    }\n\n    // retrieve the userIdentity data from the server, update the identity object, and then resolve.\n    return this.fetch()\n      .toPromise()\n      .then(response => {\n        const account: Account = response.body;\n        if (account) {\n          this.userIdentity = account;\n          this.authenticated = true;\n        } else {\n          this.userIdentity = null;\n          this.authenticated = false;\n        }\n        this.authenticationState.next(this.userIdentity);\n        return this.userIdentity;\n      })\n      .catch(err => {\n        this.userIdentity = null;\n        this.authenticated = false;\n        this.authenticationState.next(this.userIdentity);\n        return null;\n      });\n  }\n\n  isAuthenticated(): boolean {\n    return this.authenticated;\n  }\n\n  isIdentityResolved(): boolean {\n    return this.userIdentity !== undefined;\n  }\n\n  getAuthenticationState(): Observable<any> {\n    return this.authenticationState.asObservable();\n  }\n\n  getImageUrl(): string {\n    return this.isIdentityResolved() ? this.userIdentity.imageUrl : null;\n  }\n}\n"]}]}