{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/admin/health/health.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/admin/health/health.service.ts","mtime":1573033582429},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet JhiHealthService = class JhiHealthService {\n    constructor(http) {\n        this.http = http;\n        this.separator = '.';\n    }\n    checkHealth() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.MANAGEMENT_HEALTH);\n    }\n    transformHealthData(data) {\n        const response = [];\n        this.flattenHealthData(response, null, data.details);\n        return response;\n    }\n    getBaseName(name) {\n        if (name) {\n            const split = name.split('.');\n            return split[0];\n        }\n    }\n    getSubSystemName(name) {\n        if (name) {\n            const split = name.split('.');\n            split.splice(0, 1);\n            const remainder = split.join('.');\n            return remainder ? ' - ' + remainder : '';\n        }\n    }\n    /* private methods */\n    addHealthObject(result, isLeaf, healthObject, name) {\n        const healthData = {\n            name\n        };\n        const details = {};\n        let hasDetails = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (key === app_constants_1.STATUS || key === app_constants_1.ERROR) {\n                    healthData[key] = value;\n                }\n                else {\n                    if (!this.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            }\n        }\n        // Add the details\n        if (hasDetails) {\n            healthData.details = details;\n        }\n        // Only add nodes if they provide additional information\n        if (isLeaf || hasDetails || healthData.error) {\n            result.push(healthData);\n        }\n        return healthData;\n    }\n    flattenHealthData(result, path, data) {\n        for (const key in data) {\n            if (data.hasOwnProperty(key)) {\n                const value = data[key];\n                if (this.isHealthObject(value)) {\n                    if (this.hasSubSystem(value)) {\n                        this.addHealthObject(result, false, value, this.getModuleName(path, key));\n                        this.flattenHealthData(result, this.getModuleName(path, key), value);\n                    }\n                    else {\n                        this.addHealthObject(result, true, value, this.getModuleName(path, key));\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    getModuleName(path, name) {\n        let result;\n        if (path && name) {\n            result = path + this.separator + name;\n        }\n        else if (path) {\n            result = path;\n        }\n        else if (name) {\n            result = name;\n        }\n        else {\n            result = '';\n        }\n        return result;\n    }\n    hasSubSystem(healthObject) {\n        let result = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                const value = healthObject[key];\n                if (value && value.status) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n    isHealthObject(healthObject) {\n        let result = false;\n        for (const key in healthObject) {\n            if (healthObject.hasOwnProperty(key)) {\n                if (key === app_constants_1.STATUS) {\n                    result = true;\n                }\n            }\n        }\n        return result;\n    }\n};\nJhiHealthService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], JhiHealthService);\nexports.JhiHealthService = JhiHealthService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/admin/health/health.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/admin/health/health.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL, MANAGEMENT_HEALTH, ERROR, STATUS } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiHealthService {\n  separator: string;\n\n  constructor(private http: HttpClient) {\n    this.separator = '.';\n  }\n\n  checkHealth(): Observable<any> {\n    return this.http.get(SERVER_API_URL + MANAGEMENT_HEALTH);\n  }\n\n  transformHealthData(data): any {\n    const response = [];\n    this.flattenHealthData(response, null, data.details);\n    return response;\n  }\n\n  getBaseName(name): string {\n    if (name) {\n      const split = name.split('.');\n      return split[0];\n    }\n  }\n\n  getSubSystemName(name): string {\n    if (name) {\n      const split = name.split('.');\n      split.splice(0, 1);\n      const remainder = split.join('.');\n      return remainder ? ' - ' + remainder : '';\n    }\n  }\n\n  /* private methods */\n  private addHealthObject(result, isLeaf, healthObject, name): any {\n    const healthData: any = {\n      name\n    };\n\n    const details = {};\n    let hasDetails = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (key === STATUS || key === ERROR) {\n          healthData[key] = value;\n        } else {\n          if (!this.isHealthObject(value)) {\n            details[key] = value;\n            hasDetails = true;\n          }\n        }\n      }\n    }\n\n    // Add the details\n    if (hasDetails) {\n      healthData.details = details;\n    }\n\n    // Only add nodes if they provide additional information\n    if (isLeaf || hasDetails || healthData.error) {\n      result.push(healthData);\n    }\n    return healthData;\n  }\n\n  private flattenHealthData(result, path, data): any {\n    for (const key in data) {\n      if (data.hasOwnProperty(key)) {\n        const value = data[key];\n        if (this.isHealthObject(value)) {\n          if (this.hasSubSystem(value)) {\n            this.addHealthObject(result, false, value, this.getModuleName(path, key));\n            this.flattenHealthData(result, this.getModuleName(path, key), value);\n          } else {\n            this.addHealthObject(result, true, value, this.getModuleName(path, key));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  private getModuleName(path, name): string {\n    let result;\n    if (path && name) {\n      result = path + this.separator + name;\n    } else if (path) {\n      result = path;\n    } else if (name) {\n      result = name;\n    } else {\n      result = '';\n    }\n    return result;\n  }\n\n  private hasSubSystem(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        const value = healthObject[key];\n        if (value && value.status) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n\n  private isHealthObject(healthObject): boolean {\n    let result = false;\n\n    for (const key in healthObject) {\n      if (healthObject.hasOwnProperty(key)) {\n        if (key === STATUS) {\n          result = true;\n        }\n      }\n    }\n    return result;\n  }\n}\n"]}]}