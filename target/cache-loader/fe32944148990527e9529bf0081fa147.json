{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/login/login.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/core/login/login.service.ts","mtime":1573033582433},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a, _b, _c, _d, _e, _f;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst account_service_1 = require(\"app/core/auth/account.service\");\nconst auth_jwt_service_1 = require(\"app/core/auth/auth-jwt.service\");\nconst app_constants_1 = require(\"app/app.constants\");\nconst router_1 = require(\"@angular/router\");\nconst ngx_webstorage_1 = require(\"ngx-webstorage\");\nconst rxjs_1 = require(\"rxjs\");\nlet LoginService = class LoginService {\n    constructor($localStorage, $sessionStorage, accountService, authServerProvider, http, router) {\n        this.$localStorage = $localStorage;\n        this.$sessionStorage = $sessionStorage;\n        this.accountService = accountService;\n        this.authServerProvider = authServerProvider;\n        this.http = http;\n        this.router = router;\n        // fors dash board to search page\n        this.searchTypeReq = new rxjs_1.BehaviorSubject('');\n        this.searchTypeReqData = this.searchTypeReq.asObservable();\n        this.searchStatusReq = new rxjs_1.BehaviorSubject('');\n        this.searchStatusReqData = this.searchStatusReq.asObservable();\n    }\n    login(credentials, callback) {\n        const cb = callback || function () { };\n        return new Promise((resolve, reject) => {\n            this.authServerProvider.login(credentials).subscribe(data => {\n                this.accountService.identity(true).then(account => {\n                    resolve(data);\n                });\n                return cb();\n            }, err => {\n                this.logout();\n                reject(err);\n                return cb(err);\n            });\n        });\n    }\n    loginWithToken(jwt, rememberMe) {\n        return this.authServerProvider.loginWithToken(jwt, rememberMe);\n    }\n    doLogout() {\n        this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_DOLOGOUT).subscribe();\n        this.$localStorage.clear(app_constants_1.AUTHENTICATION_TOKEN);\n        this.$sessionStorage.clear(app_constants_1.AUTHENTICATION_TOKEN);\n        this.accountService.authenticate(null);\n        this.router.navigate(['/']);\n    }\n    logout() {\n        this.authServerProvider.logout().subscribe(null, null, () => this.accountService.authenticate(null));\n    }\n    getSearchDropDown() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_SEARCH_DROPDOWN);\n    }\n    // Method for Getting Employee Status Data For Dash board\n    getDashboardData() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_STATUS_DETAILS);\n    }\n    getDownloadHistoryData(loginName) {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_EXPORT_HISTORIES_DOWNLOAD + loginName);\n    }\n    getMailHistoryData(loginName) {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.API_EXPORT_HISTORIES_MAIL + loginName);\n    }\n    getSearchTypeReqData() {\n        return this.searchTypeReqData;\n    }\n    setSearchTypeReqData(data) {\n        this.searchTypeReq.next(data);\n    }\n};\nLoginService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ngx_webstorage_1.LocalStorageService !== \"undefined\" && ngx_webstorage_1.LocalStorageService) === \"function\" ? _a : Object, typeof (_b = typeof ngx_webstorage_1.SessionStorageService !== \"undefined\" && ngx_webstorage_1.SessionStorageService) === \"function\" ? _b : Object, typeof (_c = typeof account_service_1.AccountService !== \"undefined\" && account_service_1.AccountService) === \"function\" ? _c : Object, typeof (_d = typeof auth_jwt_service_1.AuthServerProvider !== \"undefined\" && auth_jwt_service_1.AuthServerProvider) === \"function\" ? _d : Object, typeof (_e = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _e : Object, typeof (_f = typeof router_1.Router !== \"undefined\" && router_1.Router) === \"function\" ? _f : Object])\n], LoginService);\nexports.LoginService = LoginService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/core/login/login.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/core/login/login.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { AccountService } from 'app/core/auth/account.service';\nimport { AuthServerProvider } from 'app/core/auth/auth-jwt.service';\nimport { SERVER_API_URL, AUTHENTICATION_TOKEN, API_DOLOGOUT, API_SEARCH_DROPDOWN, API_STATUS_DETAILS, API_EXPORT_HISTORIES_DOWNLOAD, API_EXPORT_HISTORIES_MAIL } from 'app/app.constants';\nimport { Router } from '@angular/router';\nimport { LocalStorageService, SessionStorageService } from 'ngx-webstorage';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class LoginService {\n  // fors dash board to search page\n  public searchTypeReq = new BehaviorSubject<string>('');\n  searchTypeReqData = this.searchTypeReq.asObservable();\n  public searchStatusReq = new BehaviorSubject<string>('');\n  searchStatusReqData = this.searchStatusReq.asObservable();\n  constructor(\n    private $localStorage: LocalStorageService,\n    private $sessionStorage: SessionStorageService,\n    private accountService: AccountService,\n    private authServerProvider: AuthServerProvider,\n    protected http: HttpClient,\n    protected router: Router\n  ) {}\n\n  login(credentials, callback?) {\n    const cb = callback || function() {};\n\n    return new Promise((resolve, reject) => {\n      this.authServerProvider.login(credentials).subscribe(\n        data => {\n          this.accountService.identity(true).then(account => {\n            resolve(data);\n          });\n          return cb();\n        },\n        err => {\n          this.logout();\n          reject(err);\n          return cb(err);\n        }\n      );\n    });\n  }\n\n  loginWithToken(jwt, rememberMe) {\n    return this.authServerProvider.loginWithToken(jwt, rememberMe);\n  }\n\n  doLogout() {\n    this.http.get(SERVER_API_URL + API_DOLOGOUT).subscribe();\n    this.$localStorage.clear(AUTHENTICATION_TOKEN);\n    this.$sessionStorage.clear(AUTHENTICATION_TOKEN);\n    this.accountService.authenticate(null);\n    this.router.navigate(['/']);\n  }\n\n  logout() {\n    this.authServerProvider.logout().subscribe(null, null, () => this.accountService.authenticate(null));\n  }\n\n  getSearchDropDown() {\n    return this.http.get(SERVER_API_URL + API_SEARCH_DROPDOWN);\n  }\n\n  // Method for Getting Employee Status Data For Dash board\n  getDashboardData() {\n    return this.http.get(SERVER_API_URL + API_STATUS_DETAILS);\n  }\n\n  getDownloadHistoryData(loginName) {\n    return this.http.get(SERVER_API_URL + API_EXPORT_HISTORIES_DOWNLOAD + loginName);\n  }\n\n  getMailHistoryData(loginName) {\n    return this.http.get(SERVER_API_URL + API_EXPORT_HISTORIES_MAIL + loginName);\n  }\n\n  public getSearchTypeReqData() {\n    return this.searchTypeReqData;\n  }\n\n  public setSearchTypeReqData(data: any) {\n    this.searchTypeReq.next(data);\n  }\n\n}\n"]}]}