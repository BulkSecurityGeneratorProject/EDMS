{"remainingRequest":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js??ref--9-2!/home/srs/projects/edms/node_modules/ts-loader/index.js??ref--9-3!/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/admin/configuration/configuration.service.ts","dependencies":[{"path":"/home/srs/projects/edms/src/main/webapp/app/admin/configuration/configuration.service.ts","mtime":1573033582429},{"path":"/home/srs/projects/edms/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/srs/projects/edms/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/srs/projects/edms/node_modules/ts-loader/index.js","mtime":1545640398000},{"path":"/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/srs/projects/edms/node_modules/tslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tslib_1 = require(\"tslib\");\nvar _a;\nconst core_1 = require(\"@angular/core\");\nconst http_1 = require(\"@angular/common/http\");\nconst operators_1 = require(\"rxjs/operators\");\nconst app_constants_1 = require(\"app/app.constants\");\nlet JhiConfigurationService = class JhiConfigurationService {\n    constructor(http) {\n        this.http = http;\n    }\n    get() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.MANAGEMENT_CONFIGPROPS, { observe: app_constants_1.RESPONSE }).pipe(operators_1.map((res) => {\n            const properties = [];\n            const propertiesObject = this.getConfigPropertiesObjects(res.body);\n            for (const key in propertiesObject) {\n                if (propertiesObject.hasOwnProperty(key)) {\n                    properties.push(propertiesObject[key]);\n                }\n            }\n            return properties.sort((propertyA, propertyB) => {\n                return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n            });\n        }));\n    }\n    getConfigPropertiesObjects(res) {\n        // This code is for Spring Boot 2\n        if (res[app_constants_1.CONTEXTS] !== undefined) {\n            for (const key in res[app_constants_1.CONTEXTS]) {\n                // If the key is not bootstrap, it will be the ApplicationContext Id\n                // For default app, it is baseName\n                // For microservice, it is baseName-1\n                if (!key.startsWith(app_constants_1.BOOTSTRAP)) {\n                    return res[app_constants_1.CONTEXTS][key][app_constants_1.BEANS];\n                }\n            }\n        }\n        // by default, use the default ApplicationContext Id\n        return res[app_constants_1.CONTEXTS][app_constants_1.EDMS][app_constants_1.BEANS];\n    }\n    getEnv() {\n        return this.http.get(app_constants_1.SERVER_API_URL + app_constants_1.MANAGEMENT_ENV, { observe: app_constants_1.RESPONSE }).pipe(operators_1.map((res) => {\n            const properties = {};\n            const propertySources = res.body[app_constants_1.PROPERTY_SOURCES];\n            for (const propertyObject of propertySources) {\n                const name = propertyObject[app_constants_1.NAME];\n                const detailProperties = propertyObject[app_constants_1.PROPERTIES];\n                const vals = [];\n                for (const keyDetail in detailProperties) {\n                    if (detailProperties.hasOwnProperty(keyDetail)) {\n                        vals.push({ key: keyDetail, val: detailProperties[keyDetail][app_constants_1.VALUE] });\n                    }\n                }\n                properties[name] = vals;\n            }\n            return properties;\n        }));\n    }\n};\nJhiConfigurationService = tslib_1.__decorate([\n    core_1.Injectable({ providedIn: 'root' }),\n    tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _a : Object])\n], JhiConfigurationService);\nexports.JhiConfigurationService = JhiConfigurationService;\n",{"version":3,"file":"/home/srs/projects/edms/src/main/webapp/app/admin/configuration/configuration.service.ts","sourceRoot":"","sources":["/home/srs/projects/edms/node_modules/angular-router-loader/src/index.js!/home/srs/projects/edms/node_modules/tslint-loader/index.js!/home/srs/projects/edms/src/main/webapp/app/admin/configuration/configuration.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { SERVER_API_URL, RESPONSE, CONTEXTS, BOOTSTRAP, BEANS, EDMS, PROPERTY_SOURCES, MANAGEMENT_ENV, NAME, PROPERTIES, VALUE, MANAGEMENT_CONFIGPROPS } from 'app/app.constants';\n\n@Injectable({ providedIn: 'root' })\nexport class JhiConfigurationService {\n  constructor(private http: HttpClient) {}\n\n  get(): Observable<any> {\n    return this.http.get(SERVER_API_URL + MANAGEMENT_CONFIGPROPS, { observe: RESPONSE }).pipe(\n      map((res: HttpResponse<any>) => {\n        const properties: any[] = [];\n        const propertiesObject = this.getConfigPropertiesObjects(res.body);\n        for (const key in propertiesObject) {\n          if (propertiesObject.hasOwnProperty(key)) {\n            properties.push(propertiesObject[key]);\n          }\n        }\n\n        return properties.sort((propertyA, propertyB) => {\n          return propertyA.prefix === propertyB.prefix ? 0 : propertyA.prefix < propertyB.prefix ? -1 : 1;\n        });\n      })\n    );\n  }\n\n  getConfigPropertiesObjects(res: Object) {\n    // This code is for Spring Boot 2\n    if (res[CONTEXTS] !== undefined) {\n      for (const key in res[CONTEXTS]) {\n        // If the key is not bootstrap, it will be the ApplicationContext Id\n        // For default app, it is baseName\n        // For microservice, it is baseName-1\n        if (!key.startsWith(BOOTSTRAP)) {\n          return res[CONTEXTS][key][BEANS];\n        }\n      }\n    }\n    // by default, use the default ApplicationContext Id\n    return res[CONTEXTS][EDMS][BEANS];\n  }\n\n  getEnv(): Observable<any> {\n    return this.http.get(SERVER_API_URL + MANAGEMENT_ENV, { observe: RESPONSE }).pipe(\n      map((res: HttpResponse<any>) => {\n        const properties: any = {};\n        const propertySources = res.body[PROPERTY_SOURCES];\n\n        for (const propertyObject of propertySources) {\n          const name = propertyObject[NAME];\n          const detailProperties = propertyObject[PROPERTIES];\n          const vals: any[] = [];\n          for (const keyDetail in detailProperties) {\n            if (detailProperties.hasOwnProperty(keyDetail)) {\n              vals.push({ key: keyDetail, val: detailProperties[keyDetail][VALUE] });\n            }\n          }\n          properties[name] = vals;\n        }\n        return properties;\n      })\n    );\n  }\n}\n"]}]}